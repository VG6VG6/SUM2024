"use strict";let e,n,o,t,r,i,l,a=[255,0,0],c=0,s=0,u=0;function d(){null==window.canvas||null==window.gl?(e=document.getElementById("MyGL"),n=e.getContext("webgl2")):(e=window.canvas,n=window.gl);let i=m(n.VERTEX_SHADER,"#version 300 es\n  precision highp float;\n  in vec3 InPosition;\n\n  uniform float Time;\n  uniform vec3 Mouse;\n\n  out vec2 DrawPos;\n\n  void main( void )\n  {\n    gl_Position = vec4(InPosition, 1);\n    // gl_Position.x += 0.1 * sin(Time);\n    DrawPos = InPosition.xy + Mouse.xy / 400.0;\n  }\n  "),l=m(n.FRAGMENT_SHADER,"#version 300 es\n  precision highp float;\n  out vec4 OutColor;\n\n  in vec2 DrawPos;\n  uniform float Time;\n  uniform vec3 Mouse;\n  //////uniform vec3 Color;\n\n  vec2 CmplMulCmpl( vec2 Z1, vec2 Z2 )\n  {\n    return vec2(Z1.x * Z2.x - Z1.y * Z2.y, Z1.x * Z2.y + Z1.y * Z2.x);\n  }\n\n  float julia( vec2 Z )\n  {\n    float n = 1.0;\n\n    while (n < 255.0 && length(Z) < 4.0)\n    {\n      Z = CmplMulCmpl(Z, Z) + vec2(sin(Time / 2.0) / 1.5, sin(Time / 2.0) / 1.3);\n      n += 1.0;\n    }\n    return n;\n  }\n\n  void main( void )\n  {\n    float n;\n    vec2 Z;\n  \n    Z = DrawPos;\n    n = julia(Z);\n    OutColor = vec4(n / 0.30, n / 0.47, n / 0.8, 1);\n    ///OutColor = vec4(Color, 1);\n  }\n  "),a=n.createProgram();if(n.attachShader(a,i),n.attachShader(a,l),n.linkProgram(a),!n.getProgramParameter(a,n.LINK_STATUS)){let e=n.getProgramInfoLog(a);console.log("Shader program link error: "+e)}const c=.99,s=[-.99,c,0,-.99,-.99,0,c,c,0,c,-.99,0],u=n.getAttribLocation(a,"InPosition");let d=n.createVertexArray();n.bindVertexArray(d);let v=n.createBuffer();n.bindBuffer(n.ARRAY_BUFFER,v),n.bufferData(n.ARRAY_BUFFER,new Float32Array(s),n.STATIC_DRAW),-1!=u&&(n.vertexAttribPointer(u,3,n.FLOAT,!1,0,0),n.enableVertexAttribArray(u)),o=n.getUniformLocation(a,"Time"),t=n.getUniformLocation(a,"Mouse"),r=n.getUniformLocation(a,"Color"),n.useProgram(a)}function m(e,o){const t=n.createShader(e);if(n.shaderSource(t,o),n.compileShader(t),!n.getShaderParameter(t,n.COMPILE_STATUS)){let e=n.getShaderInfoLog(t);console.log("Shader compile fail: "+e)}return t}let v,f=!1;function g(){if(n.clear(n.COLOR_BUFFER_BIT),-1!=o){const e=new Date;let t=60*e.getMinutes()+e.getSeconds()+e.getMilliseconds()/1e3;n.uniform1f(o,t)}-1!=t&&(e.addEventListener("mousedown",(e=>{i=e.clientX,l=e.clientY,f=!0})),e.addEventListener("mousemove",(e=>{!function(e){let n=e.clientX,o=e.clientY;f&&(c-=n-i,u+=o-l,l=o,i=n)}(e)})),e.addEventListener("mouseup",(()=>{f=!1})),e.addEventListener("mouseout",(()=>{f=!1})),e.addEventListener("mousewheel",(e=>{s+=e.wheelDelta/4e4})),n.uniform3f(t,c,u,s),n.uniform3f(r,a[0],a[1],a[2])),n.drawArrays(n.TRIANGLE_STRIP,0,4)}function w(){const e=document.querySelector("#glcanvas");v=document.querySelector("#col");const n=e.getContext("webgl2");if(null==n)return void alert("WebGL2 not supported");v&&v.addEventListener("change",(()=>{v.value,a[0]=100+Number("0x"+col.value.slice(1,3)),a[1]=100+Number("0x"+col.value.slice(3,5)),a[2]=100+Number("0x"+col.value.slice(5,8)),console.log(typeof a[2],a[2])})),window.gl=n,window.canvas=e,d(),n.clearColor(1,0,0,1),n.clear(n.COLOR_BUFFER_BIT);const o=()=>{n.clearColor(.3,.47,.8,1),n.clear(n.COLOR_BUFFER_BIT),g(),window.requestAnimationFrame(o)};o()}console.log("Done."),window.addEventListener("load",(()=>{w()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
