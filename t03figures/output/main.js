"use strict";class t{constructor(t,s,i){null==t?(this.x=0,this.x,this.z=0):"object"==typeof t?3==t.lenght?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==s&&null==i?(this.x=t,this.y=t,this.z=t):null==i?(this.x=t,this.y=s,this.z=0):(this.x=t,this.y=s,this.z=i)}dot(t){return null==t?this:this.x*t.x+this.y*t.y+this.z*t.z}add(t){return null==t?this:"number"==typeof t?s(this.x+t,this.y+t,this.z+t):s(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return null==t?this:"number"==typeof t?s(this.x-t,this.y-t,this.z-t):s(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return null==t?this:"number"==typeof t?s(this.x*t,this.y*t,this.z*t):s(this.x*t.x,this.y*t.y,this.z*t.z)}div(t){return null==t?this:"number"==typeof t?s(this.x/t,this.y/t,this.z/t):s(this.x*t.x,this.y*t.y,this.z*t.z)}len(){let t=this.dot(this);return 1==t||0==t?t:Math.sqrt(t)}normalize(){let t=this.len();return 1==t||0==t?this:this.div(t)}cross(t){return null==t?this:s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}}function s(...s){return new t(...s)}class i{constructor(t=null){null==t||null==t?this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]:"object"==typeof t&&4==t.length?this.m=t:this.m=t.m}mul(t){let s=m();return s.m[0][0]=this.m[0][0]*t.m[0][0]+this.m[0][1]*t.m[1][0]+this.m[0][2]*t.m[2][0]+this.m[0][3]*t.m[3][0],s.m[0][1]=this.m[0][0]*t.m[0][1]+this.m[0][1]*t.m[1][1]+this.m[0][2]*t.m[2][1]+this.m[0][3]*t.m[3][1],s.m[0][2]=this.m[0][0]*t.m[0][2]+this.m[0][1]*t.m[1][2]+this.m[0][2]*t.m[2][2]+this.m[0][3]*t.m[3][2],s.m[0][3]=this.m[0][0]*t.m[0][3]+this.m[0][1]*t.m[1][3]+this.m[0][2]*t.m[2][3]+this.m[0][3]*t.m[3][3],s.m[1][0]=this.m[1][0]*t.m[0][0]+this.m[1][1]*t.m[1][0]+this.m[1][2]*t.m[2][0]+this.m[1][3]*t.m[3][0],s.m[1][1]=this.m[1][0]*t.m[0][1]+this.m[1][1]*t.m[1][1]+this.m[1][2]*t.m[2][1]+this.m[1][3]*t.m[3][1],s.m[1][2]=this.m[1][0]*t.m[0][2]+this.m[1][1]*t.m[1][2]+this.m[1][2]*t.m[2][2]+this.m[1][3]*t.m[3][2],s.m[1][3]=this.m[1][0]*t.m[0][3]+this.m[1][1]*t.m[1][3]+this.m[1][2]*t.m[2][3]+this.m[1][3]*t.m[3][3],s.m[2][0]=this.m[2][0]*t.m[0][0]+this.m[2][1]*t.m[1][0]+this.m[2][2]*t.m[2][0]+this.m[2][3]*t.m[3][0],s.m[2][1]=this.m[2][0]*t.m[0][1]+this.m[2][1]*t.m[1][1]+this.m[2][2]*t.m[2][1]+this.m[2][3]*t.m[3][1],s.m[2][2]=this.m[2][0]*t.m[0][2]+this.m[2][1]*t.m[1][2]+this.m[2][2]*t.m[2][2]+this.m[2][3]*t.m[3][2],s.m[2][3]=this.m[2][0]*t.m[0][3]+this.m[2][1]*t.m[1][3]+this.m[2][2]*t.m[2][3]+this.m[2][3]*t.m[3][3],s.m[3][0]=this.m[3][0]*t.m[0][0]+this.m[3][1]*t.m[1][0]+this.m[3][2]*t.m[2][0]+this.m[3][3]*t.m[3][0],s.m[3][1]=this.m[3][0]*t.m[0][1]+this.m[3][1]*t.m[1][1]+this.m[3][2]*t.m[2][1]+this.m[3][3]*t.m[3][1],s.m[3][2]=this.m[3][0]*t.m[0][2]+this.m[3][1]*t.m[1][2]+this.m[3][2]*t.m[2][2]+this.m[3][3]*t.m[3][2],s.m[3][3]=this.m[3][0]*t.m[0][3]+this.m[3][1]*t.m[1][3]+this.m[3][2]*t.m[2][3]+this.m[3][3]*t.m[3][3],s}determ(){return+this.m[0][0]*h(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])+-this.m[0][1]*h(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+ +this.m[0][2]*h(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])+-this.m[0][3]*h(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}inverse(){r=m();let t=this.determ();return 0==t?m():(r.A[0][0]=+h(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][0]=-h(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][0]=+h(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][0]=-h(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][1]=-h(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][1]=+h(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][1]=-h(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][1]=+h(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][2]=+h(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][2]=-h(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][2]=+h(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][2]=-h(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][3]=-h(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/t,r.A[1][3]=+h(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/t,r.A[2][3]=-h(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/t,r.A[3][3]=+h(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/t,r)}transponse(){return m(this.m[0][0],this.m[1][0],this.m[2][0],this.m[3][0],this.m[0][1],this.m[1][1],this.m[2][1],this.m[3][1],this.m[0][2],this.m[1][2],this.m[2][2],this.m[3][2],this.m[0][3],this.m[1][3],this.m[2][3],this.m[3][3])}}function h(t,s,i,h,m,r,e,o,n){return t*m*n+s*r*e+i*h*o-t*r*o-s*h*n-i*m*e}function m(...t){return new i(...t)}class e{Loc=s();At=s();Dir=s();Right=s();Up=s();matrView=m();MatrProj=m();MatrVP=m();FrameW=0;FrameH=0;Wp=0;Hp=0;ProjSize=0;ProjDist=0;ProjFarClip=0;set(t,i,h){return this.matrView=function(t,s,i){let h=s.sub(t).normalize(),r=h.cross(i).normalize(),e=r.cross(h).normalize();return m([[r.x,e.x,-h.x,0],[r.y,e.y,-h.y,0],[r.z,e.z,-h.z,0],[-t.dot(r),-t.dot(e),t.dot(h),1]])}(t,i,h),this.Right=s(this.matrView.m[0][0],this.matrView.m[1][0],this.matrView.m[2][0]),this.Up=s(this.matrView.m[0][1],this.matrView.m[1][1],this.matrView.m[2][1]),this.Dir=s(-this.matrView.m[0][2],-this.matrView.m[1][2],-this.matrView.m[2][2]),this.Loc=t,this.At=i,this.MatrVP=this.matrView.mul(this.MatrProj),this}setProj(t,s,i){let h,r;var e,o,n,a,l,d;this.ProjDist=s,this.ProjFarClip=i,h=r=this.ProjSize=t,this.FrameW>=this.FrameH?h*=this.FrameW/this.FrameH:r*=this.FrameH/this.FrameW,this.Wp=h,this.Hp=r,this.MatrProj=(e=-h/2,o=h/2,n=-r/2,a=r/2,l=this.ProjDist,d=this.ProjFarClip,m([[2*l/(o-e),0,0,0],[0,2*l/(a-n),0,0],[(o+e)/(o-e),(a+n)/(a-n),-(d+l)/(d-l),-1],[0,0,-2*l*d/(d-l),0]])),this.MatrVP=this.matrView.mul(this.MatrProj)}setSize(t,s){this.FrameW=t,this.FrameH=s,this.setProj(this.ProjSize,this.ProjDist,this.ProjFarClip)}}function o(t){return t*Math.PI/180}class n{pos=s();n=s()}function a(...t){return new n(...t)}class l{type;trans=m();constructor(t,i,h){this.numOfElements=0;let m=[],r=0;!function(t,i){let h;for(h=0;h<t.length;h++)t[h].n=s(0);for(h=0;h<i.length;h+=3){let s=i[h],m=i[h+1],r=i[h+2],e=t[s].pos,o=t[m].pos,n=t[r].pos,a=o.sub(e).cross(n.sub(e)).normalize();t[s].n=t[s].n.add(a),t[m].n=t[m].n.add(a),t[r].n=t[r].n.add(a)}for(h=0;h<t.length;h++)t[h].n=t[h].n.normalize()}(t,i);for(let s of t)m[r++]=s.pos.x,m[r++]=s.pos.y,m[r++]=s.pos.z,m[r++]=s.n.x,m[r++]=s.n.y,m[r++]=s.n.z;this.vertexArray=h.gl.createVertexArray(),h.gl.bindVertexArray(this.vertexArray),this.vertexBufer=h.gl.createBuffer(),h.gl.bindBuffer(h.gl.ARRAY_BUFFER,this.vertexBufer),h.gl.bufferData(h.gl.ARRAY_BUFFER,new Float32Array(m),h.gl.STATIC_DRAW),-1!=h.shd.posLoc&&(h.gl.vertexAttribPointer(h.shd.posLoc,3,h.gl.FLOAT,!1,24,0),h.gl.enableVertexAttribArray(h.shd.posLoc)),-1!=h.shd.posN&&(h.gl.vertexAttribPointer(h.shd.posN,3,h.gl.FLOAT,!1,24,12),h.gl.enableVertexAttribArray(h.shd.posN)),this.indexArray=h.gl.createBuffer(),h.gl.bindBuffer(h.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),h.gl.bufferData(h.gl.ELEMENT_ARRAY_BUFFER,new Float32Array([].concat(...i)),h.gl.STATIC_DRAW),this.numOfElements=i.length,this.rnd=h}draw(t){null==t&&(t=m()),this.world=this.trans.mul(t),this.rnd.gl.bindVertexArray(this.vertexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),-1!=this.rnd.shd.worldLoc&&this.rnd.gl.uniformMatrix4fv(this.rnd.shd.worldLoc,!1,new Float32Array([].concat(...this.world.m))),-1!=this.rnd.shd.VPLoc&&this.rnd.gl.uniformMatrix4fv(this.rnd.shd.VPLoc,!1,new Float32Array([].concat(...this.rnd.camera.MatrVP.m))),this.rnd.gl.drawArrays(this.rnd.gl.TRIANGLES,0,this.numOfElements)}}class d{constructor(t,i){this.vert=[];let h=[];this.ind=[];let m,r=t/2,e=s(-r,-r,-r),o=s(-r,-r,r),n=s(r,-r,r),d=s(r,-r,-r),c=s(-r,r,-r),u=s(-r,r,r),g=s(r,r,r),p=s(r,r,-r);for(m=0;m<48;m++)h[m]=a();m=0,h[m++].pos=o,h[m++].pos=e,h[m++].pos=n,h[m++].pos=n,h[m++].pos=e,h[m++].pos=d,h[m++].pos=e,h[m++].pos=u,h[m++].pos=c,h[m++].pos=e,h[m++].pos=o,h[m++].pos=u,h[m++].pos=n,h[m++].pos=g,h[m++].pos=u,h[m++].pos=n,h[m++].pos=u,h[m++].pos=o,h[m++].pos=n,h[m++].pos=d,h[m++].pos=g,h[m++].pos=d,h[m++].pos=p,h[m++].pos=g,h[m++].pos=e,h[m++].pos=c,h[m++].pos=p,h[m++].pos=e,h[m++].pos=p,h[m++].pos=d,h[m++].pos=c,h[m++].pos=u,h[m++].pos=g,h[m++].pos=c,h[m++].pos=g,h[m++].pos=p;for(let t=0;t<m;t++)this.ind[t]=t;this.primmitive=function(...t){return new l(...t)}(h,this.ind,i)}draw(t){this.primmitive.draw(t)}}console.log("Done.");class c{async _init(t,s){this.name=t,this.id=null,this.shaders=[{id:null,type:s.gl.VERTEX_SHADER,name:"vert",src:""},{id:null,type:s.gl.FRAGMENT_SHADER,name:"frag",src:""}];for(const s of this.shaders){let i=await fetch(`bin/shaders/${t}/${s.name}.glsl`),h=await i.text();"string"==typeof h&&""!=h&&(s.src=h)}this.updateShadersSource(s)}updateShadersSource(t){if(this.shaders[0].id=null,this.shaders[1].id=null,this.id=null,""!=this.shaders[0].src&&""!=this.shaders[1].src){if(this.shaders.forEach((s=>{if(s.id=t.gl.createShader(s.type),t.gl.shaderSource(s.id,s.src),t.gl.compileShader(s.id),!t.gl.getShaderParameter(s.id,t.gl.COMPILE_STATUS)){let i=t.gl.getShaderInfoLog(s.id);console.log(`Shader ${this.name}/${s.name} compile fail: ${i}`)}})),this.id=t.gl.createProgram(),this.shaders.forEach((s=>{null!=s.id&&t.gl.attachShader(this.id,s.id)})),t.gl.linkProgram(this.id),!t.gl.getProgramParameter(this.id,t.gl.LINK_STATUS)){let s=t.gl.getProgramInfoLog(this.id);console.log(`Shader program ${this.name} link fail: ${s}`)}this.updateShaderData(t)}}updateShaderData(t){t.shd.posLoc=t.gl.getAttribLocation(t.shd.id,"InPosition"),t.shd.posN=t.gl.getAttribLocation(t.shd.id,"InNormal"),t.shd.timeLoc=t.gl.getUniformLocation(t.shd.id,"Time"),t.shd.mouseLoc=t.gl.getUniformLocation(t.shd.id,"Mouse"),t.shd.camDirLoc=t.gl.getUniformLocation(t.shd.id,"CamDir"),t.shd.worldLoc=t.gl.getUniformLocation(t.shd.id,"World"),t.shd.VPLoc=t.gl.getUniformLocation(t.shd.id,"VP")}constructor(t,s){this._init(t,s)}apply(t){null!=t.shd.id&&t.gl.useProgram(t.shd.id)}}const u=s(0,1,0),g=s(0,.5,2);class p{constructor(t){if(this.canvas=document.querySelector("#"+t),this.gl=this.canvas.getContext("webgl2"),this.gl.enable(this.gl.DEPTH_TEST),null==this.gl)return alert("WebGL2 not supported"),null;this.gl.clearColor(.3,.47,.8,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.shd=function(t,s){return new c(t,s)}("def",this),this.flag=!1,this.camera=function(...t){return new e(...t)}(),this.camera.set(g,s(0),u),this.camera.setProj(.1,.1,300),this.camera.setSize(300,300)}render(){const t=()=>{this.gl.clearColor(.3,.47,.8,1),this.flag?(this.shd.apply(this),function(t){t.gl.clear(t.gl.COLOR_BUFFER_BIT);const s=new Date;window.t=60*s.getMinutes()+s.getSeconds()+s.getMilliseconds()/1e3,-1!=t.shd.timeLoc&&t.gl.uniform1f(t.shd.timeLoc,window.t),-1!=t.shd.mouseLoc&&t.gl.uniform3f(t.shd.mouseLoc,0,0,0),-1!=t.shd.camDirLoc&&t.gl.uniform3f(t.shd.camDirLoc,!1,t.camera.Dir.x,t.camera.Dir.y,t.camera.z)}(this),this.cub.draw(function(t){let s=o(t),i=Math.sin(s),h=Math.cos(s);return m([[h,0,-i,0],[0,1,0,0],[i,0,h,0],[0,0,0,1]])}(45*window.t).mul(function(t){let s=o(t),i=Math.sin(s),h=Math.cos(s);return m([[1,0,0,0],[0,h,i,0],[0,-i,h,0],[0,0,0,1]])}(30*window.t)))):null!=this.shd.id&&(this.shd.apply(this),this.shd.updateShaderData(this),this.prg=this.shd.id,this.flag=!0,this.cub=function(...t){return new d(...t)}(1,this)),window.requestAnimationFrame(t)};t()}}function f(...t){return new p(...t)}window.addEventListener("load",(()=>{let t=f("glCanvas1"),s=f("glCanvas2");t.render(),s.render()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
