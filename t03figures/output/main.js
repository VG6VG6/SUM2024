"use strict";class t{constructor(t,i,s){null==t?(this.x=0,this.x,this.z=0):"object"==typeof t?3==t.lenght?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==i&&null==s?(this.x=t,this.y=t,this.z=t):null==s?(this.x=t,this.y=i,this.z=0):(this.x=t,this.y=i,this.z=s)}dot(t){return null==t?this:this.x*t.x+this.y*t.y+this.z*t.z}add(t){return null==t?this:"number"==typeof t?i(this.x+t,this.y+t,this.z+t):i(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return null==t?this:"number"==typeof t?i(this.x-t,this.y-t,this.z-t):i(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return null==t?this:"number"==typeof t?i(this.x*t,this.y*t,this.z*t):i(this.x*t.x,this.y*t.y,this.z*t.z)}div(t){return null==t?this:"number"==typeof t?i(this.x/t,this.y/t,this.z/t):i(this.x*t.x,this.y*t.y,this.z*t.z)}len(){let t=this.dot(this);return 1==t||0==t?t:Math.sqrt(t)}normalize(){let t=this.dot(this);return 1==t||0==t?this:this.div(t)}cross(t){return null==t?this:i(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}}function i(...i){return new t(...i)}class s{constructor(t=null){null==t||null==t?this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]:"object"==typeof t&&4==t.lenght?this.m=t:this.m=t.m}translate(t){"number"==typeof t&&(this.m=h([1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]))}mul(t){r=h(),r.m[0][0]=this.m[0][0]*t.m[0][0]+this.m[0][1]*t.m[1][0]+this.m[0][2]*t.m[2][0]+this.m[0][3]*t.m[3][0],r.m[0][1]=this.m[0][0]*t.m[0][1]+this.m[0][1]*t.m[1][1]+this.m[0][2]*t.m[2][1]+this.m[0][3]*t.m[3][1],r.m[0][2]=this.m[0][0]*t.m[0][2]+this.m[0][1]*t.m[1][2]+this.m[0][2]*t.m[2][2]+this.m[0][3]*t.m[3][2],r.m[0][3]=this.m[0][0]*t.m[0][3]+this.m[0][1]*t.m[1][3]+this.m[0][2]*t.m[2][3]+this.m[0][3]*t.m[3][3],r.m[1][0]=this.m[1][0]*t.m[0][0]+this.m[1][1]*t.m[1][0]+this.m[1][2]*t.m[2][0]+this.m[1][3]*t.m[3][0],r.m[1][1]=this.m[1][0]*t.m[0][1]+this.m[1][1]*t.m[1][1]+this.m[1][2]*t.m[2][1]+this.m[1][3]*t.m[3][1],r.m[1][2]=this.m[1][0]*t.m[0][2]+this.m[1][1]*t.m[1][2]+this.m[1][2]*t.m[2][2]+this.m[1][3]*t.m[3][2],r.m[1][3]=this.m[1][0]*t.m[0][3]+this.m[1][1]*t.m[1][3]+this.m[1][2]*t.m[2][3]+this.m[1][3]*t.m[3][3],r.m[2][0]=this.m[2][0]*t.m[0][0]+this.m[2][1]*t.m[1][0]+this.m[2][2]*t.m[2][0]+this.m[2][3]*t.m[3][0],r.m[2][1]=this.m[2][0]*t.m[0][1]+this.m[2][1]*t.m[1][1]+this.m[2][2]*t.m[2][1]+this.m[2][3]*t.m[3][1],r.m[2][2]=this.m[2][0]*t.m[0][2]+this.m[2][1]*t.m[1][2]+this.m[2][2]*t.m[2][2]+this.m[2][3]*t.m[3][2],r.m[2][3]=this.m[2][0]*t.m[0][3]+this.m[2][1]*t.m[1][3]+this.m[2][2]*t.m[2][3]+this.m[2][3]*t.m[3][3],r.m[3][0]=this.m[3][0]*t.m[0][0]+this.m[3][1]*t.m[1][0]+this.m[3][2]*t.m[2][0]+this.m[3][3]*t.m[3][0],r.m[3][1]=this.m[3][0]*t.m[0][1]+this.m[3][1]*t.m[1][1]+this.m[3][2]*t.m[2][1]+this.m[3][3]*t.m[3][1],r.m[3][2]=this.m[3][0]*t.m[0][2]+this.m[3][1]*t.m[1][2]+this.m[3][2]*t.m[2][2]+this.m[3][3]*t.m[3][2],r.m[3][3]=this.m[3][0]*t.m[0][3]+this.m[3][1]*t.m[1][3]+this.m[3][2]*t.m[2][3]+this.m[3][3]*t.m[3][3],this.m=r}determ(){return+this.m[0][0]*m(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])+-this.m[0][1]*m(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+ +this.m[0][2]*m(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])+-this.m[0][3]*m(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}inverse(){r=h();let t=this.determ();return 0==t?h():(r.A[0][0]=+m(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][0]=-m(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][0]=+m(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][0]=-m(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][1]=-m(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][1]=+m(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][1]=-m(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][1]=+m(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][2]=+m(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][2]=-m(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][2]=+m(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][2]=-m(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][3]=-m(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/t,r.A[1][3]=+m(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/t,r.A[2][3]=-m(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/t,r.A[3][3]=+m(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/t,r)}transponse(){return h(this.m[0][0],this.m[1][0],this.m[2][0],this.m[3][0],this.m[0][1],this.m[1][1],this.m[2][1],this.m[3][1],this.m[0][2],this.m[1][2],this.m[2][2],this.m[3][2],this.m[0][3],this.m[1][3],this.m[2][3],this.m[3][3])}}function m(t,i,s,m,h,e,n,r,o){return t*h*o+i*e*n+s*m*r-t*e*r-i*m*o-s*h*n}function h(...t){return new s(...t)}let e,n,o,l,u,a,c=0,d=0,f=0;function y(t,i){const s=e.createShader(t);if(e.shaderSource(s,i),e.compileShader(s),!e.getShaderParameter(s,e.COMPILE_STATUS)){let t=e.getShaderInfoLog(s);console.log("Shader compile fail: "+t)}return s}let x,A,g,v=!1;function z(){if(e.clear(e.COLOR_BUFFER_BIT),-1!=o){const t=new Date;let i=60*t.getMinutes()+t.getSeconds()+t.getMilliseconds()/1e3;e.uniform1f(o,i)}-1!=l&&(n.addEventListener("mousedown",(t=>{u=t.clientX,a=t.clientY,v=!0})),n.addEventListener("mousemove",(t=>{!function(t){let i=t.clientX,s=t.clientY;v&&(c-=i-u,f+=s-a,a=s,u=i)}(t)})),n.addEventListener("mouseup",(()=>{v=!1})),n.addEventListener("mouseout",(()=>{v=!1})),n.addEventListener("mousewheel",(t=>{d+=t.wheelDelta/4e4})),e.uniform3f(l,c,f,d)),e.drawArrays(e.TRIANGLE_STRIP,0,4)}function p(){if(A=document.querySelector("#glCanvas"),x=A.getContext("webgl2"),null==x)return void alert("WebGL2 not supported");x.clearColor(.3,.47,.8,1),x.clear(x.COLOR_BUFFER_BIT),function(t,i){e=t,n=i;let s=y(e.VERTEX_SHADER,"#version 300 es\n  precision highp float;\n  in vec3 InPosition;\n\n  uniform float Time;\n  uniform vec3 Mouse;\n\n  out vec2 DrawPos;\n\n  void main( void )\n  {\n    gl_Position = vec4(InPosition, 1);\n    // gl_Position.x += 0.1 * sin(Time);\n    DrawPos = InPosition.xy + Mouse.xy / 400.0;\n  }\n  "),m=y(e.FRAGMENT_SHADER,"#version 300 es\n  precision highp float;\n  out vec4 OutColor;\n\n  in vec2 DrawPos;\n  uniform float Time;\n  uniform vec3 Mouse;\n\n  vec2 CmplMulCmpl( vec2 Z1, vec2 Z2 )\n  {\n    return vec2(Z1.x * Z2.x - Z1.y * Z2.y, Z1.x * Z2.y + Z1.y * Z2.x);\n  }\n\n  float julia( vec2 Z )\n  {\n    float n = 1.0;\n\n    while (n < 255.0 && length(Z) < 20.0)\n    {\n      Z = CmplMulCmpl(Z, Z) + vec2(sin(Time / 2.0) / 7.5, sin(Time / 2.0) / 1.3);\n      n += 1.0;\n    }\n    return n;\n  }\n\n  void main( void )\n  {\n    float n;\n    vec2 Z;\n  \n    Z = DrawPos;\n    n = julia(Z);\n    OutColor = vec4(n / 30.0, n / 47.0, n / 80.0, 1);\n  }\n  "),h=e.createProgram();if(e.attachShader(h,s),e.attachShader(h,m),e.linkProgram(h),!e.getProgramParameter(h,e.LINK_STATUS)){let t=e.getProgramInfoLog(h);console.log("Shader program link error: "+t)}const r=.99,u=[-.99,r,0,-.99,-.99,0,r,r,0,r,-.99,0],a=e.getAttribLocation(h,"InPosition");let c=e.createVertexArray();e.bindVertexArray(c);let d=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,d),e.bufferData(e.ARRAY_BUFFER,new Float32Array(u),e.STATIC_DRAW),-1!=a&&(e.vertexAttribPointer(a,3,e.FLOAT,!1,0,0),e.enableVertexAttribArray(a)),o=e.getUniformLocation(h,"Time"),l=e.getUniformLocation(h,"Mouse"),e.useProgram(h)}(x,A),g=function(t,i,s){let m=i.sub(t).normalize(),e=m.cross(s).normalize(),n=e.cross(m).normalize();return h([e.x,n.x,-m.x,0],[e.y,n.y,-m.y,0],[e.z,n.z,-m.z,0],[-t.dot(e),-t.dot(n),t.dot(m),1])}(i(10,10,0),i(0,1,0),i(0)),console.log(g);const t=()=>{x.clearColor(1,0,0,1),x.clear(x.COLOR_BUFFER_BIT),z(),window.requestAnimationFrame(t)};t()}console.log("Done."),window.addEventListener("load",(()=>{p()})),function(...t){console.log("HI:"),console.log(...t[0]),console.log("HI:"),console.log(...t),console.log("HI:")}([1,2,3,4],[2,3,4,5],[6,7,8,9],[1,1,1,1]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
