"use strict";class t{constructor(t,s,i){null==t?(this.x=0,this.x,this.z=0):"object"==typeof t?3==t.lenght?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==s&&null==i?(this.x=t,this.y=t,this.z=t):null==i?(this.x=t,this.y=s,this.z=0):(this.x=t,this.y=s,this.z=i)}dot(t){return null==t?this:this.x*t.x+this.y*t.y+this.z*t.z}add(t){return null==t?this:"number"==typeof t?s(this.x+t,this.y+t,this.z+t):s(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return null==t?this:"number"==typeof t?s(this.x-t,this.y-t,this.z-t):s(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return null==t?this:"number"==typeof t?s(this.x*t,this.y*t,this.z*t):s(this.x*t.x,this.y*t.y,this.z*t.z)}div(t){return null==t?this:"number"==typeof t?s(this.x/t,this.y/t,this.z/t):s(this.x*t.x,this.y*t.y,this.z*t.z)}transform(t){return null==t?this:s((this.x,t.m[0][0],this.y,t.m[1][0],this.z,t.m[2][0],t.m[3][0],this.x,t.m[0][1],this.y,t.m[1][1],this.z,t.m[2][1],t.m[3][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2]+t.m[3][2]))}len(){let t=this.dot(this);return 1==t||0==t?t:Math.sqrt(t)}normalize(){let t=this.len();return 1==t||0==t?this:this.div(t)}cross(t){return null==t?this:s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}}function s(...s){return new t(...s)}function i(t){return t*Math.PI/180}class h{constructor(t=null){null==t||null==t?this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]:"object"==typeof t&&4==t.length?this.m=t:this.m=t.m}mul(t){let s=m();return s.m[0][0]=this.m[0][0]*t.m[0][0]+this.m[0][1]*t.m[1][0]+this.m[0][2]*t.m[2][0]+this.m[0][3]*t.m[3][0],s.m[0][1]=this.m[0][0]*t.m[0][1]+this.m[0][1]*t.m[1][1]+this.m[0][2]*t.m[2][1]+this.m[0][3]*t.m[3][1],s.m[0][2]=this.m[0][0]*t.m[0][2]+this.m[0][1]*t.m[1][2]+this.m[0][2]*t.m[2][2]+this.m[0][3]*t.m[3][2],s.m[0][3]=this.m[0][0]*t.m[0][3]+this.m[0][1]*t.m[1][3]+this.m[0][2]*t.m[2][3]+this.m[0][3]*t.m[3][3],s.m[1][0]=this.m[1][0]*t.m[0][0]+this.m[1][1]*t.m[1][0]+this.m[1][2]*t.m[2][0]+this.m[1][3]*t.m[3][0],s.m[1][1]=this.m[1][0]*t.m[0][1]+this.m[1][1]*t.m[1][1]+this.m[1][2]*t.m[2][1]+this.m[1][3]*t.m[3][1],s.m[1][2]=this.m[1][0]*t.m[0][2]+this.m[1][1]*t.m[1][2]+this.m[1][2]*t.m[2][2]+this.m[1][3]*t.m[3][2],s.m[1][3]=this.m[1][0]*t.m[0][3]+this.m[1][1]*t.m[1][3]+this.m[1][2]*t.m[2][3]+this.m[1][3]*t.m[3][3],s.m[2][0]=this.m[2][0]*t.m[0][0]+this.m[2][1]*t.m[1][0]+this.m[2][2]*t.m[2][0]+this.m[2][3]*t.m[3][0],s.m[2][1]=this.m[2][0]*t.m[0][1]+this.m[2][1]*t.m[1][1]+this.m[2][2]*t.m[2][1]+this.m[2][3]*t.m[3][1],s.m[2][2]=this.m[2][0]*t.m[0][2]+this.m[2][1]*t.m[1][2]+this.m[2][2]*t.m[2][2]+this.m[2][3]*t.m[3][2],s.m[2][3]=this.m[2][0]*t.m[0][3]+this.m[2][1]*t.m[1][3]+this.m[2][2]*t.m[2][3]+this.m[2][3]*t.m[3][3],s.m[3][0]=this.m[3][0]*t.m[0][0]+this.m[3][1]*t.m[1][0]+this.m[3][2]*t.m[2][0]+this.m[3][3]*t.m[3][0],s.m[3][1]=this.m[3][0]*t.m[0][1]+this.m[3][1]*t.m[1][1]+this.m[3][2]*t.m[2][1]+this.m[3][3]*t.m[3][1],s.m[3][2]=this.m[3][0]*t.m[0][2]+this.m[3][1]*t.m[1][2]+this.m[3][2]*t.m[2][2]+this.m[3][3]*t.m[3][2],s.m[3][3]=this.m[3][0]*t.m[0][3]+this.m[3][1]*t.m[1][3]+this.m[3][2]*t.m[2][3]+this.m[3][3]*t.m[3][3],s}determ(){return+this.m[0][0]*matrDeterm3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])+-this.m[0][1]*matrDeterm3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+ +this.m[0][2]*matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])+-this.m[0][3]*matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}inverse(){r=m();let t=this.determ();return 0==t?m():(r.A[0][0]=+matrDeterm3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][0]=-matrDeterm3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][0]=+matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][0]=-matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][1]=-matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][1]=+matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][1]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][1]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][2]=+matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][2]=-matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][2]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][2]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][3]=-matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/t,r.A[1][3]=+matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/t,r.A[2][3]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/t,r.A[3][3]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/t,r)}transponse(){return m(this.m[0][0],this.m[1][0],this.m[2][0],this.m[3][0],this.m[0][1],this.m[1][1],this.m[2][1],this.m[3][1],this.m[0][2],this.m[1][2],this.m[2][2],this.m[3][2],this.m[0][3],this.m[1][3],this.m[2][3],this.m[3][3])}static matrDeterm3x3(t,s,i,h,m,e,r,a,n){return t*m*n+s*e*r+i*h*a-t*e*a-s*h*n-i*m*r}static matrRotate(t,s){let h=i(t),e=Math.sin(h),r=Math.cos(h);return m([[r+s.x*s.x*(1-r),s.y*s.x*(1-r)-s.z*e,s.z*s.x*(1-r)+s.y*e,0],[s.x*s.y*(1-r)+s.z*e,r+s.y*s.y*(1-r),s.z*s.y*(1-r)-s.x*e,0],[s.x*s.z*(1-r)-s.y*e,s.y*s.z*(1-r)+s.x*e,r+s.z*s.z*(1-r),0],[0,0,0,1]])}static matrRotateX(t){let s=i(t),h=Math.sin(s),e=Math.cos(s);return m([[1,0,0,0],[0,e,h,0],[0,-h,e,0],[0,0,0,1]])}static matrRotateY(t){let s=i(t),h=Math.sin(s),e=Math.cos(s);return m([[e,0,-h,0],[0,1,0,0],[h,0,e,0],[0,0,0,1]])}static matrRotateZ(t){let s=i(t),h=Math.sin(s),e=Math.cos(s);return m([[e,h,0,0],[-h,e,0,0],[0,0,1,0],[0,0,0,1]])}static scale(t){return m([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]])}static matrOrtho(t,s,i,h,e,r){return m([[2/(s-t),0,0,0],[0,2/(h-i),0,0],[0,0,-2/(r-e),0],[-(s+t)/(s-t),-(h+i)/(h-i),-(r+e)/(r-e),1]])}static matrFrustum(t,s,i,h,e,r){return m([[2*e/(s-t),0,0,0],[0,2*e/(h-i),0,0],[(s+t)/(s-t),(h+i)/(h-i),-(r+e)/(r-e),-1],[0,0,-2*e*r/(r-e),0]])}static matrView(t,s,i){let h=s.sub(t).normalize(),e=h.cross(i).normalize(),r=e.cross(h).normalize();return m([[e.x,r.x,-h.x,0],[e.y,r.y,-h.y,0],[e.z,r.z,-h.z,0],[-t.dot(e),-t.dot(r),t.dot(h),1]])}static matrTranslate(t){return m([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]])}}function m(...t){return new h(...t)}m.matrView=(...t)=>h.matrView(...t),m.matrTranslate=(...t)=>h.matrTranslate(...t),m.matrFrustum=(...t)=>h.matrFrustum(...t),m.matrRotateY=(...t)=>h.matrRotateY(...t),m.matrRotate=(...t)=>h.matrRotate(...t),m.matrRotateX=(...t)=>h.matrRotateX(...t),m.matrRotateZ=(...t)=>h.matrRotateZ(...t);class e{Loc=s();At=s();Dir=s();Right=s();Up=s();matrView=m();MatrProj=m();MatrVP=m();FrameW=0;FrameH=0;Wp=0;Hp=0;ProjSize=0;ProjDist=0;ProjFarClip=0;set(t,i,h){return this.matrView=m.matrView(t,i,h),this.Right=s(this.matrView.m[0][0],this.matrView.m[1][0],this.matrView.m[2][0]),this.Up=s(this.matrView.m[0][1],this.matrView.m[1][1],this.matrView.m[2][1]),this.Dir=s(-this.matrView.m[0][2],-this.matrView.m[1][2],-this.matrView.m[2][2]),this.Loc=t,this.At=i,this.MatrVP=this.matrView.mul(this.MatrProj),this}setProj(t,s,i){let h,e;this.ProjDist=s,this.ProjFarClip=i,h=e=this.ProjSize=t,this.FrameW>=this.FrameH?h*=this.FrameW/this.FrameH:e*=this.FrameH/this.FrameW,this.Wp=h,this.Hp=e,this.MatrProj=m.matrFrustum(-h/2,h/2,-e/2,e/2,this.ProjDist,this.ProjFarClip),this.MatrVP=this.matrView.mul(this.MatrProj)}setSize(t,s){this.FrameW=t,this.FrameH=s,this.setProj(this.ProjSize,this.ProjDist,this.ProjFarClip)}}function a(...t){return new e(...t)}function n(){const t=()=>{const t=new Date;return t.getMilliseconds()/1e3+t.getSeconds()+60*t.getMinutes()};return this.response=(s=null)=>{let i=t();this.globalTime=i,this.globalDeltaTime=i-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=i-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=i-this.pauseTime-this.startTime),this.frameCounter++,i-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(i-this.oldTimeFPS),this.oldTimeFPS=i,this.frameCounter=0,null!=s&&(document.getElementById(s).innerHTML=this.getFPS())),this.oldTime=i},this.getFPS=()=>{this.FPS.toFixed(3)},this.globalTime=this.localTime=t(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}class o{async _init(t,s){this.name=t,this.id=null,this.shaders=[{id:null,type:s.gl.VERTEX_SHADER,name:"vert",src:""},{id:null,type:s.gl.FRAGMENT_SHADER,name:"frag",src:""}];for(const s of this.shaders){let i=await fetch(`bin/shaders/${t}/${s.name}.glsl`),h=await i.text();"string"==typeof h&&""!=h&&(s.src=h)}this.updateShadersSource(s)}updateShadersSource(t){if(this.shaders[0].id=null,this.shaders[1].id=null,this.id=null,""!=this.shaders[0].src&&""!=this.shaders[1].src){if(this.shaders.forEach((s=>{if(s.id=t.gl.createShader(s.type),t.gl.shaderSource(s.id,s.src),t.gl.compileShader(s.id),!t.gl.getShaderParameter(s.id,t.gl.COMPILE_STATUS)){let i=t.gl.getShaderInfoLog(s.id);console.log(`Shader ${this.name}/${s.name} compile fail: ${i}`)}})),this.id=t.gl.createProgram(),this.shaders.forEach((s=>{null!=s.id&&t.gl.attachShader(this.id,s.id)})),t.gl.linkProgram(this.id),!t.gl.getProgramParameter(this.id,t.gl.LINK_STATUS)){let s=t.gl.getProgramInfoLog(this.id);console.log(`Shader program ${this.name} link fail: ${s}`)}this.updateShaderData(t)}}updateShaderData(t){t.shd.posLoc=t.gl.getAttribLocation(t.shd.id,"InPosition"),t.shd.posN=t.gl.getAttribLocation(t.shd.id,"InNormal"),t.shd.timeLoc=t.gl.getUniformLocation(t.shd.id,"Time"),t.shd.mouseLoc=t.gl.getUniformLocation(t.shd.id,"Mouse"),t.shd.camDirLoc=t.gl.getUniformLocation(t.shd.id,"CamDir"),t.shd.worldLoc=t.gl.getUniformLocation(t.shd.id,"World"),t.shd.VPLoc=t.gl.getUniformLocation(t.shd.id,"VP")}constructor(t,s){this._init(t,s)}apply(t){null!=t.shd.id&&t.gl.useProgram(t.shd.id)}}class l{pos=s();n=s()}function d(...t){return new l(...t)}class c{type;trans=m();constructor(t,i,h){this.numOfElements=0;let m=[],e=0;!function(t,i){let h;for(h=0;h<t.length;h++)t[h].n=s(0);for(h=0;h<i.length;h+=3){let s=i[h],m=i[h+1],e=i[h+2],r=t[s].pos,a=t[m].pos,n=t[e].pos,o=a.sub(r).cross(n.sub(r)).normalize();t[s].n=t[s].n.add(o),t[m].n=t[m].n.add(o),t[e].n=t[e].n.add(o)}for(h=0;h<t.length;h++)t[h].n=t[h].n.normalize()}(t,i);for(let s of t)m[e++]=s.pos.x,m[e++]=s.pos.y,m[e++]=s.pos.z,m[e++]=s.n.x,m[e++]=s.n.y,m[e++]=s.n.z;this.vertexArray=h.gl.createVertexArray(),h.gl.bindVertexArray(this.vertexArray),this.vertexBufer=h.gl.createBuffer(),h.gl.bindBuffer(h.gl.ARRAY_BUFFER,this.vertexBufer),null==h.shd.id?(this.primLoad=!1,this.rnd=h,this.ind=i,this.points=m):(h.gl.bufferData(h.gl.ARRAY_BUFFER,new Float32Array(m),h.gl.STATIC_DRAW),-1!=h.shd.posLoc&&(h.gl.vertexAttribPointer(h.shd.posLoc,3,h.gl.FLOAT,!1,24,0),h.gl.enableVertexAttribArray(h.shd.posLoc)),-1!=h.shd.posN&&(h.gl.vertexAttribPointer(h.shd.posN,3,h.gl.FLOAT,!1,24,12),h.gl.enableVertexAttribArray(h.shd.posN)),this.indexArray=h.gl.createBuffer(),h.gl.bindBuffer(h.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),h.gl.bufferData(h.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(i),h.gl.STATIC_DRAW),this.numOfElements=i.length,this.rnd=h,this.primLoad=!0)}draw(t){null==t&&(t=m()),this.primLoad||(this.rnd.gl.bufferData(this.rnd.gl.ARRAY_BUFFER,new Float32Array(this.points),this.rnd.gl.STATIC_DRAW),-1!=this.rnd.shd.posLoc&&(this.rnd.gl.vertexAttribPointer(this.rnd.shd.posLoc,3,this.rnd.gl.FLOAT,!1,24,0),this.rnd.gl.enableVertexAttribArray(this.rnd.shd.posLoc)),-1!=this.rnd.shd.posN&&(this.rnd.gl.vertexAttribPointer(this.rnd.shd.posN,3,this.rnd.gl.FLOAT,!1,24,12),this.rnd.gl.enableVertexAttribArray(this.rnd.shd.posN)),this.indexArray=this.rnd.gl.createBuffer(),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),this.rnd.gl.bufferData(this.rnd.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(this.ind),this.rnd.gl.STATIC_DRAW),this.numOfElements=this.ind.length,this.primLoad=!0),this.world=this.trans.mul(t),this.rnd.gl.bindVertexArray(this.vertexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ARRAY_BUFFER,this.vertexBufer),-1!=this.rnd.shd.camDirLoc&&this.rnd.gl.uniform3f(this.rnd.shd.camDirLoc,!1,this.rnd.camera.Dir.x,this.rnd.camera.Dir.y,this.rnd.camera.Dir.z),-1!=this.rnd.shd.worldLoc&&this.rnd.gl.uniformMatrix4fv(this.rnd.shd.worldLoc,!1,new Float32Array([].concat(...this.world.m))),-1!=this.rnd.shd.VPLoc&&this.rnd.gl.uniformMatrix4fv(this.rnd.shd.VPLoc,!1,new Float32Array([].concat(...this.rnd.camera.MatrVP.m))),this.numOfElements>0?this.rnd.gl.drawElements(this.rnd.gl.TRIANGLES,this.numOfElements,this.rnd.gl.UNSIGNED_INT,0):this.rnd.gl.drawArrays(this.rnd.gl.TRIANGLES,0,this.numOfElements)}}class u{constructor(t,i){this.vert=[];let h=[];this.ind=[];let m,e=t/2,r=s(-e,-e,-e),a=s(-e,-e,e),n=s(e,-e,e),o=s(e,-e,-e),l=s(-e,e,-e),u=s(-e,e,e),g=s(e,e,e),p=s(e,e,-e);for(m=0;m<48;m++)h[m]=d();m=0,h[m++].pos=a,h[m++].pos=r,h[m++].pos=n,h[m++].pos=n,h[m++].pos=r,h[m++].pos=o,h[m++].pos=r,h[m++].pos=u,h[m++].pos=l,h[m++].pos=r,h[m++].pos=a,h[m++].pos=u,h[m++].pos=n,h[m++].pos=g,h[m++].pos=u,h[m++].pos=n,h[m++].pos=u,h[m++].pos=a,h[m++].pos=n,h[m++].pos=o,h[m++].pos=g,h[m++].pos=o,h[m++].pos=p,h[m++].pos=g,h[m++].pos=r,h[m++].pos=l,h[m++].pos=p,h[m++].pos=r,h[m++].pos=p,h[m++].pos=o,h[m++].pos=l,h[m++].pos=u,h[m++].pos=g,h[m++].pos=l,h[m++].pos=g,h[m++].pos=p;for(let t=0;t<m;t++)this.ind[t]=t;this.primmitive=function(...t){return new c(...t)}(h,this.ind,i)}draw(t){this.primmitive.draw(t)}}function g(...t){return new u(...t)}class p{init(t){this.cube=g(.1,t),this.cube2=g(.2,t)}response(){}render(t){this.cube.draw(m.matrRotateY(45*t.timer.localTime)),this.cube2.draw(m.matrRotateY(45*t.timer.localTime+45).mul(m.matrTranslate(s(0,.2,0))))}close(){}}function f(t){return 180*t/Math.PI}class y{init(){}response(t){let i,h,e,r,a,n,o,l;t.isMove&&(i=t.camera.At.sub(t.camera.Loc).len(),h=(t.camera.Loc.y-t.camera.At.y)/i,e=Math.sqrt(1-h*h),r=i*e,a=(t.camera.Loc.z-t.camera.At.z)/r,n=(t.camera.Loc.x-t.camera.At.x)/r,o=f(Math.atan2(n,a)),l=f(Math.atan2(e,h)),l+=-1*t.Mdy,l<.08&&(l=.08),l>178.9&&(l=178.9),i+=.001*t.Mdz,i<.1&&(i=.1),t.camera.set(s(0,i,0).transform(m.matrRotateX(l).mul(m.matrRotateY(o).mul(m.matrTranslate(t.camera.At)))),t.camera.At,s(0,1,0)))}render(){}close(){}}let x=[];x.push(function(...t){return new p(...t)}()),x.push(function(...t){return new y(...t)}());class A{init(...t){for(let s of x)s.init(...t)}response(...t){for(let s of x)s.response(...t)}render(...t){for(let s of x)s.render(...t)}close(...t){for(let s of x)s.close(...t)}}function w(...t){return new A(...t)}class z{prims=[];matrs=[];constructor(t,s){if(this.canvas=t,this.gl=this.canvas.getContext("webgl2"),this.gl.enable(this.gl.DEPTH_TEST),null==this.gl)return alert("WebGL2 not supported"),null;this.shd=function(t,s){return new o(t,s)}("def",this),this.gl.clearColor(.3,.47,.8,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.flag=!1,this.camera=s,this.timer=new n}resize(t){this.camera=t,this.gl.viewport(0,0,this.canvas.width,this.canvas.height)}draw(){const t=()=>{this.gl.clearColor(.3,.47,.8,1),this.flag?(this.shd.apply(this),this.timer.response(),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.inputUpdate(),w().response(this),w().render(this)):null!=this.shd.id&&(this.shd.apply(this),this.shd.updateShaderData(this),this.flag=!0),window.requestAnimationFrame(t)};t()}inputInit(){this.hammer||(this.hammer=new Hammer(this.canvas)),window.addEventListener("keydown",(t=>{"f"==t.code&&t.shiftKey&&rnd.cam.set(vec3(5),vec3(0),vec3(0,1,0))})),window.addEventListener("keydown",(t=>{"p"==t.code&&t.shiftKey&&(rnd.timer.isPause=!rnd.timer.isPause)})),this.Mdz=0,this.Mdy=0,this.Mdx=0,this.My=0,this.Mx=0,this.Mz=0,this.hammer.on("pan",(t=>{this.Mtype="pan",this.Mdz=t.deltaX,this.Mz+=t.deltaX,this.Mdy=t.deltaY,this.My+=t.deltaY,this.isMove=!0})),this.canvas.addEventListener("mousewheel",(t=>{this.Mdz=t.wheelDelta,this.Mz+=t.wheelDelta,this.isMove=!0,t.preventDefault()}))}inputUpdate(){this.oldMx==this.Mx&&(this.Mdx=0),this.oldMy==this.My&&(this.Mdy=0),this.oldMz==this.Mz&&(this.Mdz=0),this.oldMx=this.Mx,this.oldMy=this.My,this.oldMz=this.Mz}}let M,T,D,F=new WebSocket("ws://localhost:8000");window.addEventListener("load",(()=>{M=document.getElementById("gameCanv"),T=document.getElementById("chat2D"),M.width=document.body.clientWidth-T.clientWidth-20,M.height=document.body.clientHeight,function(){let t=a();t.set(E,s(0),L),t.setProj(P,R,b),t.setSize(M.width,M.height),D=function(...t){return new z(...t)}(M,t),D.inputInit(),w().init(D),D.draw()}()})),window.addEventListener("resize",(()=>{M.width=document.body.clientWidth-T.clientWidth-20;let t=a();t.set(E,s(0),L),t.setProj(P,R,b),t.setSize(M.width,M.height),D.resize(t)})),F.onopen=t=>{F.send("Hello from client")},F.onmessage=t=>{try{JSON.parse(t.data.toString())}catch{}};const L=s(0,1,0),R=.1,P=.1,b=300,E=s(0,1.5,1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
