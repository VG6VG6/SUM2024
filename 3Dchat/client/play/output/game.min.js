"use strict";class t{constructor(t,s,e){null==t?(this.x=0,this.y=0,this.z=0):"object"==typeof t?3==t.lenght?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==s&&null==e?(this.x=t,this.y=t,this.z=t):null==e?(this.x=t,this.y=s,this.z=0):(this.x=t,this.y=s,this.z=e)}dot(t){return null==t?this:this.x*t.x+this.y*t.y+this.z*t.z}add(t){return null==t?this:"number"==typeof t?s(this.x+t,this.y+t,this.z+t):s(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return null==t?this:"number"==typeof t?s(this.x-t,this.y-t,this.z-t):s(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return null==t?this:"number"==typeof t?s(this.x*t,this.y*t,this.z*t):s(this.x*t.x,this.y*t.y,this.z*t.z)}div(t){return null==t?this:"number"==typeof t?s(this.x/t,this.y/t,this.z/t):s(this.x*t.x,this.y*t.y,this.z*t.z)}transform(t){return s(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2])}pointTransform(t){return s(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0]+t.m[3][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1]+t.m[3][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2]+t.m[3][2])}len(){let t=this.dot(this);return 1==t||0==t?t:Math.sqrt(t)}normalize(){let t=this.len();return 1==t||0==t?this:this.div(t)}cross(t){return null==t?this:s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}}function s(...s){return new t(...s)}function e(t){return t*Math.PI/180}class i{constructor(t=null){null==t||null==t?this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]:16==t.length?this.m=new i([[t[0],t[1],t[2],t[3]],[t[4],t[5],t[6],t[7]],[t[8],t[9],t[10],t[11]],[t[12],t[13],t[14],t[15]]]):"object"==typeof t&&4==t.length?this.m=t:this.m=t.m}mul(t){let s=h();return s.m[0][0]=this.m[0][0]*t.m[0][0]+this.m[0][1]*t.m[1][0]+this.m[0][2]*t.m[2][0]+this.m[0][3]*t.m[3][0],s.m[0][1]=this.m[0][0]*t.m[0][1]+this.m[0][1]*t.m[1][1]+this.m[0][2]*t.m[2][1]+this.m[0][3]*t.m[3][1],s.m[0][2]=this.m[0][0]*t.m[0][2]+this.m[0][1]*t.m[1][2]+this.m[0][2]*t.m[2][2]+this.m[0][3]*t.m[3][2],s.m[0][3]=this.m[0][0]*t.m[0][3]+this.m[0][1]*t.m[1][3]+this.m[0][2]*t.m[2][3]+this.m[0][3]*t.m[3][3],s.m[1][0]=this.m[1][0]*t.m[0][0]+this.m[1][1]*t.m[1][0]+this.m[1][2]*t.m[2][0]+this.m[1][3]*t.m[3][0],s.m[1][1]=this.m[1][0]*t.m[0][1]+this.m[1][1]*t.m[1][1]+this.m[1][2]*t.m[2][1]+this.m[1][3]*t.m[3][1],s.m[1][2]=this.m[1][0]*t.m[0][2]+this.m[1][1]*t.m[1][2]+this.m[1][2]*t.m[2][2]+this.m[1][3]*t.m[3][2],s.m[1][3]=this.m[1][0]*t.m[0][3]+this.m[1][1]*t.m[1][3]+this.m[1][2]*t.m[2][3]+this.m[1][3]*t.m[3][3],s.m[2][0]=this.m[2][0]*t.m[0][0]+this.m[2][1]*t.m[1][0]+this.m[2][2]*t.m[2][0]+this.m[2][3]*t.m[3][0],s.m[2][1]=this.m[2][0]*t.m[0][1]+this.m[2][1]*t.m[1][1]+this.m[2][2]*t.m[2][1]+this.m[2][3]*t.m[3][1],s.m[2][2]=this.m[2][0]*t.m[0][2]+this.m[2][1]*t.m[1][2]+this.m[2][2]*t.m[2][2]+this.m[2][3]*t.m[3][2],s.m[2][3]=this.m[2][0]*t.m[0][3]+this.m[2][1]*t.m[1][3]+this.m[2][2]*t.m[2][3]+this.m[2][3]*t.m[3][3],s.m[3][0]=this.m[3][0]*t.m[0][0]+this.m[3][1]*t.m[1][0]+this.m[3][2]*t.m[2][0]+this.m[3][3]*t.m[3][0],s.m[3][1]=this.m[3][0]*t.m[0][1]+this.m[3][1]*t.m[1][1]+this.m[3][2]*t.m[2][1]+this.m[3][3]*t.m[3][1],s.m[3][2]=this.m[3][0]*t.m[0][2]+this.m[3][1]*t.m[1][2]+this.m[3][2]*t.m[2][2]+this.m[3][3]*t.m[3][2],s.m[3][3]=this.m[3][0]*t.m[0][3]+this.m[3][1]*t.m[1][3]+this.m[3][2]*t.m[2][3]+this.m[3][3]*t.m[3][3],s}determ(){return+this.m[0][0]*matrDeterm3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])+-this.m[0][1]*matrDeterm3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+ +this.m[0][2]*matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])+-this.m[0][3]*matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}inverse(){r=h();let t=this.determ();return 0==t?h():(r.A[0][0]=+matrDeterm3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][0]=-matrDeterm3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][0]=+matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][0]=-matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][1]=-matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][1]=+matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][1]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][1]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][2]=+matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][2]=-matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][2]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][2]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][3]=-matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/t,r.A[1][3]=+matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/t,r.A[2][3]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/t,r.A[3][3]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/t,r)}transponse(){return h(this.m[0][0],this.m[1][0],this.m[2][0],this.m[3][0],this.m[0][1],this.m[1][1],this.m[2][1],this.m[3][1],this.m[0][2],this.m[1][2],this.m[2][2],this.m[3][2],this.m[0][3],this.m[1][3],this.m[2][3],this.m[3][3])}transformPoint(t){return null==t?s():s((t.x,this.m[0][0],t.y,this.m[1][0],t.z,this.m[2][0],this.m[3][0],t.x,this.m[0][1],t.y,this.m[1][1],t.z,this.m[2][1],this.m[3][1],t.x*this.m[0][2]+t.y*this.m[1][2]+t.z*this.m[2][2]+this.m[3][2]))}static matrDeterm3x3(t,s,e,i,h,r,a,m,n){return t*h*n+s*r*a+e*i*m-t*r*m-s*i*n-e*h*a}static matrRotate(t,s){let i=e(t),r=Math.sin(i),a=Math.cos(i);return h([[a+s.x*s.x*(1-a),s.y*s.x*(1-a)-s.z*r,s.z*s.x*(1-a)+s.y*r,0],[s.x*s.y*(1-a)+s.z*r,a+s.y*s.y*(1-a),s.z*s.y*(1-a)-s.x*r,0],[s.x*s.z*(1-a)-s.y*r,s.y*s.z*(1-a)+s.x*r,a+s.z*s.z*(1-a),0],[0,0,0,1]])}static matrRotateX(t){let s=e(t),i=Math.sin(s),r=Math.cos(s);return h([[1,0,0,0],[0,r,i,0],[0,-i,r,0],[0,0,0,1]])}static matrRotateY(t){let s=e(t),i=Math.sin(s),r=Math.cos(s);return h([[r,0,-i,0],[0,1,0,0],[i,0,r,0],[0,0,0,1]])}static matrRotateZ(t){let s=e(t),i=Math.sin(s),r=Math.cos(s);return h([[r,i,0,0],[-i,r,0,0],[0,0,1,0],[0,0,0,1]])}static scale(t){return h([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]])}static matrOrtho(t,s,e,i,r,a){return h([[2/(s-t),0,0,0],[0,2/(i-e),0,0],[0,0,-2/(a-r),0],[-(s+t)/(s-t),-(i+e)/(i-e),-(a+r)/(a-r),1]])}static matrFrustum(t,s,e,i,r,a){return h([[2*r/(s-t),0,0,0],[0,2*r/(i-e),0,0],[(s+t)/(s-t),(i+e)/(i-e),-(a+r)/(a-r),-1],[0,0,-2*r*a/(a-r),0]])}static matrView(t,s,e){let i=s.sub(t).normalize(),r=i.cross(e).normalize(),a=r.cross(i).normalize();return h([[r.x,a.x,-i.x,0],[r.y,a.y,-i.y,0],[r.z,a.z,-i.z,0],[-t.dot(r),-t.dot(a),t.dot(i),1]])}static matrTranslate(t){return h([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]])}}function h(...t){return new i(...t)}h.matrView=(...t)=>i.matrView(...t),h.matrTranslate=(...t)=>i.matrTranslate(...t),h.matrFrustum=(...t)=>i.matrFrustum(...t),h.matrRotateY=(...t)=>i.matrRotateY(...t),h.matrRotate=(...t)=>i.matrRotate(...t),h.matrRotateX=(...t)=>i.matrRotateX(...t),h.matrRotateZ=(...t)=>i.matrRotateZ(...t),h.scale=(...t)=>i.scale(...t);class a{Loc=s();At=s();Dir=s();Right=s();Up=s();matrView=h();MatrProj=h();MatrVP=h();FrameW=0;FrameH=0;Wp=0;Hp=0;ProjSize=0;ProjDist=0;ProjFarClip=0;set(t,e,i){return this.matrView=h.matrView(t,e,i),this.right=s(this.matrView.m[0][0],this.matrView.m[1][0],this.matrView.m[2][0]),this.up=s(this.matrView.m[0][1],this.matrView.m[1][1],this.matrView.m[2][1]),this.dir=s(-this.matrView.m[0][2],-this.matrView.m[1][2],-this.matrView.m[2][2]),this.loc=t,this.at=e,this.MatrVP=this.matrView.mul(this.MatrProj),this}setProj(t,s,e){let i,r;this.ProjDist=s,this.ProjFarClip=e,i=r=this.ProjSize=t,this.FrameW>=this.FrameH?i*=this.FrameW/this.FrameH:r*=this.FrameH/this.FrameW,this.Wp=i,this.Hp=r,this.MatrProj=h.matrFrustum(-i/2,i/2,-r/2,r/2,this.ProjDist,this.ProjFarClip),this.MatrVP=this.matrView.mul(this.MatrProj)}setSize(t,s){this.FrameW=t,this.FrameH=s,this.setProj(this.ProjSize,this.ProjDist,this.ProjFarClip)}}function m(){const t=()=>{const t=new Date;return t.getMilliseconds()/1e3+t.getSeconds()+60*t.getMinutes()};return this.response=(s=null)=>{let e=t();this.globalTime=e,this.globalDeltaTime=e-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=e-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=e-this.pauseTime-this.startTime),this.frameCounter++,e-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(e-this.oldTimeFPS),this.oldTimeFPS=e,this.frameCounter=0,null!=s&&(document.getElementById(s).innerHTML=this.getFPS())),this.oldTime=e},this.getFPS=()=>{this.FPS.toFixed(3)},this.globalTime=this.localTime=t(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}class n{async _init(t,s){this.name=t,this.id=null,this.shaders=[{id:null,type:s.gl.VERTEX_SHADER,name:"vert",src:""},{id:null,type:s.gl.FRAGMENT_SHADER,name:"frag",src:""}];for(const s of this.shaders){let e=await fetch(`bin/shaders/${t}/${s.name}.glsl`),i=await e.text();"string"==typeof i&&""!=i&&(s.src=i)}this.updateShadersSource(s)}updateShadersSource(t){if(this.shaders[0].id=null,this.shaders[1].id=null,this.id=null,""!=this.shaders[0].src&&""!=this.shaders[1].src){if(this.shaders.forEach((s=>{if(s.id=t.gl.createShader(s.type),t.gl.shaderSource(s.id,s.src),t.gl.compileShader(s.id),!t.gl.getShaderParameter(s.id,t.gl.COMPILE_STATUS)){let e=t.gl.getShaderInfoLog(s.id);console.log(`Shader ${this.name}/${s.name} compile fail: ${e}`)}})),this.id=t.gl.createProgram(),this.shaders.forEach((s=>{null!=s.id&&t.gl.attachShader(this.id,s.id)})),t.gl.linkProgram(this.id),!t.gl.getProgramParameter(this.id,t.gl.LINK_STATUS)){let s=t.gl.getProgramInfoLog(this.id);console.log(`Shader program ${this.name} link fail: ${s}`)}this.updateShaderData(t)}}updateShaderData(t){let s=t.gl;this.attrs={};const e=s.getProgramParameter(this.id,s.ACTIVE_ATTRIBUTES);for(let t=0;t<e;t++){const e=s.getActiveAttrib(this.id,t);this.attrs[e.name]={name:e.name,type:e.type,size:e.size,loc:s.getAttribLocation(this.id,e.name)}}this.uniforms={};const i=s.getProgramParameter(this.id,s.ACTIVE_UNIFORMS);for(let t=0;t<i;t++){const e=s.getActiveUniform(this.id,t);this.uniforms[e.name]={name:e.name,type:e.type,size:e.size,loc:s.getUniformLocation(this.id,e.name)}}this.uniformBlocks={};const h=s.getProgramParameter(this.id,s.ACTIVE_UNIFORM_BLOCKS);for(let t=0;t<h;t++){const e=s.getActiveUniformBlockName(this.id,t),i=s.getActiveUniformBlockName(this.id,t);this.uniformBlocks[e]={name:e,index:i,size:s.getActiveUniformBlockParameter(this.id,i,s.UNIFORM_BLOCK_DATA_SIZE),bind:s.getActiveUniformBlockParameter(this.id,i,s.UNIFORM_BLOCK_BINDING)}}}constructor(t,s){this._init(t,s)}apply(t){null!=this.id&&t.gl.useProgram(this.id)}}class o{constructor(t,s,e){this.gl=e.gl,this.type=t,this.size=s,this.id=null,0!=s&&null!=t&&(this.id=this.gl.createBuffer(),this.gl.bindBuffer(t,this.id),this.gl.bufferData(t,s,this.gl.STATIC_DRAW))}update(t){this.gl.bindBuffer(this.type,this.id),this.gl.bufferSubData(this.type,0,t)}}class l extends o{constructor(t,s,e,i){super(i.gl.UNIFORM_BUFFER,s,i),this.gl=i.gl,this.name=t,this.bindPoint=e}apply(t){null!=t&&null!=t.id&&null!=t.uniformBlocks[this.name]&&(this.gl.uniformBlockBinding(t.id,t.uniformBlocks[this.name].index,this.bindPoint),this.gl.bindBufferBase(this.gl.UNIFORM_BUFFER,this.bindPoint,this.id))}}function d(...t){return new l(...t)}const c=[];c.push({name:"Black Plastic",Ka:s(0,0,0),Kd:s(.01,.01,.01),Ks:s(.5,.5,.5),Ph:32}),c.push({name:"Brass",Ka:s(.329412,.223529,.027451),Kd:s(.780392,.568627,.113725),Ks:s(.992157,.941176,.807843),Ph:27.8974}),c.push({name:"Bronze",Ka:s(.2125,.1275,.054),Kd:s(.714,.4284,.18144),Ks:s(.393548,.271906,.166721),Ph:25.6}),c.push({name:"Chrome",Ka:s(.25,.25,.25),Kd:s(.4,.4,.4),Ks:s(.774597,.774597,.774597),Ph:76.8}),c.push({name:"Copper",Ka:s(.19125,.0735,.0225),Kd:s(.7038,.27048,.0828),Ks:s(.256777,.137622,.086014),Ph:12.8}),c.push({name:"Gold",Ka:s(.24725,.1995,.0745),Kd:s(.75164,.60648,.22648),Ks:s(.628281,.555802,.366065),Ph:51.2}),c.push({name:"Peweter",Ka:s(.10588,.058824,.113725),Kd:s(.427451,.470588,.541176),Ks:s(.3333,.3333,.521569),Ph:9.84615}),c.push({name:"Silver",Ka:s(.19225,.19225,.19225),Kd:s(.50754,.50754,.50754),Ks:s(.508273,.508273,.508273),Ph:51.2}),c.push({name:"Polished Silver",Ka:s(.23125,.23125,.23125),Kd:s(.2775,.2775,.2775),Ks:s(.773911,.773911,.773911),Ph:89.6}),c.push({name:"Turquoise",Ka:s(.1,.18725,.1745),Kd:s(.396,.74151,.69102),Ks:s(.297254,.30829,.306678),Ph:12.8}),c.push({name:"Ruby",Ka:s(.1745,.01175,.01175),Kd:s(.61424,.04136,.04136),Ks:s(.727811,.626959,.626959),Ph:76.8}),c.push({name:"Polished Gold",Ka:s(.24725,.2245,.0645),Kd:s(.34615,.3143,.0903),Ks:s(.797357,.723991,.208006),Ph:83.2}),c.push({name:"Polished Bronze",Ka:s(.25,.148,.06475),Kd:s(.4,.2368,.1036),Ks:s(.774597,.458561,.200621),Ph:76.8}),c.push({name:"Polished Copper",Ka:s(.2295,.08825,.0275),Kd:s(.5508,.2118,.066),Ks:s(.580594,.223257,.0695701),Ph:51.2}),c.push({name:"Jade",Ka:s(.135,.2225,.1575),Kd:s(.135,.2225,.1575),Ks:s(.316228,.316228,.316228),Ph:12.8}),c.push({name:"Obsidian",Ka:s(.05375,.05,.06625),Kd:s(.18275,.17,.22525),Ks:s(.332741,.328634,.346435),Ph:38.4}),c.push({name:"Pearl",Ka:s(.25,.20725,.20725),Kd:s(1,.829,.829),Ks:s(.296648,.296648,.296648),Ph:11.264}),c.push({name:"Emerald",Ka:s(.0215,.1745,.0215),Kd:s(.07568,.61424,.07568),Ks:s(.633,.727811,.633),Ph:76.8}),c.push({name:"Black Rubber",Ka:s(.02,.02,.02),Kd:s(.01,.01,.01),Ks:s(.4,.4,.4),Ph:10});class u{constructor(t,e,i,h,r,a){if(null==t)return new u("def",s(.3),s(.47),s(.8),1,a);this.tex=[],this.isTex=[],this.name=t,this.ka=e,this.kd=i,this.ks=h,this.ph=r;for(let t=0;t<8;t++)this.tex[t]=null,this.isTex[t]=0}apply(t,s){if(null!=s.id){s.apply(t),s.ubo.apply(s);for(let s=0;s<this.tex.length;s++)null!=this.tex[s]&&this.tex[s].apply(t,s)}}textureAttach(t,s){s<0||s>8||!t||(this.tex[s]=t,this.isTex[s]=1)}static getFromLib(t,e){for(let s=0;s<c.length;s++)if(c[s].name==t)return new u(c[s].mtl.name,c[s].mtl.ka,c[s].mtl.kd,c[s].mtl.ks,c[s].mtl.ps,e);return new u("def",s(.3),s(.47),s(.8),30,e)}static init(t){for(let s=0;s<t.shd.length;s++)t.shd[s].uniformBlocks.Material?t.shd[s].ubo=d("Material",t.shd[s].uniformBlocks.Material.size,t.shd[s].uniformBlocks.Material.bind,t):console.log("Material is not found")}static loadLib(t){for(let s=0;s<c.length;s++)c[s].mtl=new u(c[s].name,c[s].Ka,c[s].Kd,c[s].Ks,c[s].Ph,t)}}function g(...t){return new u(...t)}g.getFromLib=(...t)=>u.getFromLib(...t),g.init=(...t)=>u.init(...t),g.loadLib=(...t)=>u.loadLib(...t);class f{constructor(t,e,i,h){this.color=t,this.pos=s(e),this.n=s(i),this.tex=s(h)}}function y(...t){return new f(...t)}class p{constructor(t,s,e,i,r,a,m,n,o,l){this.numOfElements=0;let d=[],c=0;this.trans=h(),this.type=a||e.gl.TRIANGLES,this.minMaxBB(t),r||x(t,s);for(let s of t)d[c++]=s.color[0],d[c++]=s.color[1],d[c++]=s.color[2],d[c++]=s.color[3],d[c++]=s.pos.x,d[c++]=s.pos.y,d[c++]=s.pos.z,d[c++]=s.n.x,d[c++]=s.n.y,d[c++]=s.n.z,d[c++]=s.tex.x,d[c++]=s.tex.y;this.vertexArray=e.gl.createVertexArray(),this.vertexBufer=e.gl.createBuffer(),this.indexArray=e.gl.createBuffer(),this.primLoad=!1,this.rnd=e,this.ind=s,this.points=d,this.shd=i,this.mtl=g(),this.colorType=m||e.gl.FLOAT,this.normalType=o||e.gl.FLOAT,this.posType=n||e.gl.FLOAT,this.texType=l||e.gl.FLOAT}minMaxBB(t){this.minBB=s(t[0].pos),this.maxBB=s(t[0].pos);for(let s=1;s<t.length;s++){let e=t[s].pos;this.minBB.x>e.x&&(this.minBB.x=e.x),this.maxBB.x<e.x&&(this.maxBB.x=e.x),this.minBB.y>e.y&&(this.minBB.y=e.y),this.maxBB.y<e.y&&(this.maxBB.y=e.y),this.minBB.z>e.z&&(this.minBB.z=e.z),this.maxBB.z<e.z&&(this.maxBB.z=e.z)}}static async loadOBJ(t,e,i){let h=[],r=[],a=await fetch(t),m=(await a.text()).split("\n");for(let t of m){if("v"==t[0]){let e=t.split(" ");b(e);let i=s(parseFloat(e[1]),parseFloat(e[2]),parseFloat(e[3]));h.push(y(i))}if("f"==t[0]){let s=t.split(" ");r.push(parseInt(s[1].split("/")[0])-1),r.push(parseInt(s[2].split("/")[0])-1),r.push(parseInt(s[3].split("/")[0])-1)}}return x(h,r),new p(h,r,e,i)}draw(t){null==t&&(t=h());let s=this.shd;if(this.primLoad||(this.rnd.gl.bindVertexArray(this.vertexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ARRAY_BUFFER,this.vertexBufer),this.rnd.gl.bufferData(this.rnd.gl.ARRAY_BUFFER,new Float32Array(this.points),this.rnd.gl.STATIC_DRAW),s.attrs.InColor&&-1!=s.attrs.InColor.loc&&(this.rnd.gl.vertexAttribPointer(s.attrs.InColor.loc,4,this.colorType,!1,48,0),this.rnd.gl.enableVertexAttribArray(s.attrs.InColor.loc)),-1!=s.attrs.InPosition.loc&&(this.rnd.gl.vertexAttribPointer(s.attrs.InPosition.loc,3,this.posType,!1,48,16),this.rnd.gl.enableVertexAttribArray(s.attrs.InPosition.loc)),-1!=s.attrs.InNormal.loc&&(this.rnd.gl.vertexAttribPointer(s.attrs.InNormal.loc,3,this.normalType,!1,48,28),this.rnd.gl.enableVertexAttribArray(s.attrs.InNormal.loc)),-1!=s.attrs.InTexCoord.loc&&(this.rnd.gl.vertexAttribPointer(s.attrs.InTexCoord.loc,2,this.texType,!1,48,40),this.rnd.gl.enableVertexAttribArray(s.attrs.InTexCoord.loc)),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),this.rnd.gl.bufferData(this.rnd.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(this.ind),this.rnd.gl.STATIC_DRAW),this.numOfElements=this.ind.length,this.primLoad=!0),this.mtl){let t=[];t.push(this.mtl.ka.x),t.push(this.mtl.ka.y),t.push(this.mtl.ka.z),t.push(0),t.push(this.mtl.kd.x),t.push(this.mtl.kd.y),t.push(this.mtl.kd.z),t.push(0),t.push(this.mtl.ks.x),t.push(this.mtl.ks.y),t.push(this.mtl.ks.z),t.push(this.mtl.ph);for(let s=0;s<8;s++)t.push(this.mtl.isTex[s]),this.mtl.isTex[s]&&(this.rnd.gl.activeTexture(this.rnd.gl.TEXTURE0+s),this.rnd.gl.bindTexture(this.mtl.tex[s].type,this.mtl.tex[s].id));s.ubo.update(new Float32Array(t)),this.mtl.apply(this.rnd,this.shd)}this.world=this.trans.mul(t),this.shd,this.rnd.gl.bindVertexArray(this.vertexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ARRAY_BUFFER,this.vertexBufer),s.uniforms.CamDir&&-1!=s.uniforms.CamDir.loc&&this.rnd.gl.uniform3f(s.uniforms.CamDir.loc,!1,this.rnd.camera.Dir.x,this.rnd.camera.Dir.y,this.rnd.camera.Dir.z),s.uniforms.CamLoc&&-1!=s.uniforms.CamLoc.loc&&this.rnd.gl.uniform3f(s.uniforms.CamLoc.loc,!1,this.rnd.camera.Loc.x,this.rnd.camera.Loc.y,this.rnd.camera.Loc.z),s.uniforms.World&&-1!=s.uniforms.World.loc&&this.rnd.gl.uniformMatrix4fv(s.uniforms.World.loc,!1,new Float32Array([].concat(...this.world.m))),s.uniforms.VP&&-1!=s.uniforms.VP.loc&&this.rnd.gl.uniformMatrix4fv(s.uniforms.VP.loc,!1,new Float32Array([].concat(...this.rnd.camera.MatrVP.m)));for(let t=0;t<8;t++)s.uniforms[`Tex${t}`]&&-1!=s.uniforms[`Tex${t}`].loc&&this.rnd.gl.uniform1i(s.uniforms[`Tex${t}`].loc,t);this.numOfElements>0?this.rnd.gl.drawElements(this.type,this.numOfElements,this.rnd.gl.UNSIGNED_INT,0):this.rnd.gl.drawArrays(this.type,0,this.numOfElements)}}function x(t,e){let i;for(i=0;i<t.length;i++)t[i].n=s(0);for(i=0;i<e.length;i+=3){let s=e[i],h=e[i+1],r=e[i+2],a=t[s].pos,m=t[h].pos,n=t[r].pos,o=m.sub(a).cross(n.sub(a)).normalize();t[s].n=t[s].n.add(o),t[h].n=t[h].n.add(o),t[r].n=t[r].n.add(o)}for(i=0;i<t.length;i++)t[i].n=t[i].n.normalize()}function b(t){for(let s=0;s<t.length;s++)""==t[s]&&(t.splice(s,1),s--)}function T(...t){return new p(...t)}class w{constructor(t,s){this.name=t,this.img=new Image,this.img.src=s}}function D(...t){return new w(...t)}class v{constructor(t,s,e){this.name=t.name,this.type=s,this.id=e.gl.createTexture(),this.gl=e.gl,this.gl.bindTexture(this.type,this.id),t.img&&(this.gl.texImage2D(this.type,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,new Uint8Array([255,255,255,0])),t.img.onload=()=>{this.gl.bindTexture(this.type,this.id),this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!0),this.gl.texImage2D(this.type,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,t.img),this.gl.generateMipmap(this.type),this.gl.texParameteri(this.type,this.gl.TEXTURE_WRAP_S,this.gl.REPEAT),this.gl.texParameteri(this.type,this.gl.TEXTURE_WRAP_T,this.gl.REPEAT),this.gl.texParameteri(this.type,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR_MIPMAP_LINEAR),this.gl.texParameteri(this.type,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR)})}apply(t,s){t.gl.activeTexture(t.gl.TEXTURE0+s),t.gl.bindTexture(this.type,this.id)}}function A(...t){return new v(...t)}class B{init(t){let e=[];e.push(y([0,0,0,1],s(-10,0,-10),s(0,1,0),s(0,1))),e.push(y([0,0,0,1],s(-10,0,10),s(0,1,0),s(0,0))),e.push(y([0,0,0,1],s(10,0,10),s(0,1,0),s(1,0))),e.push(y([0,0,0,1],s(-10,0,-10),s(0,1,0),s(0,1))),e.push(y([0,0,0,1],s(10,0,10),s(0,1,0),s(1,0))),e.push(y([0,0,0,1],s(10,0,-10),s(0,1,0),s(1,1))),this.graund=T(e,[0,1,2,3,4,5],t,t.shd[0]),this.graund.mtl=g.getFromLib();let i=D("graund","bin/images/graund.jpg");this.graund.mtl.textureAttach(A(i,t.gl.TEXTURE_2D,t),0)}response(){}render(t){for(let t=-5;t<5;t++)for(let e=-5;e<5;e++)this.graund.draw(h.matrTranslate(s(20*t,0,20*e)))}close(){}}class P{init(t){t.lastResponse=-1}response(t){if(t.input.keysClick.KeyP&&(t.timer.isPause=!t.timer.isPause),t.input.keysClick.Tab&&t.lastResponse<t.timer.globalTime-1){if(t.isOn)$("#toggleButton").animate({right:"5px"},500),$("#chat2D").animate({right:"-400px"},500),t.isOn=!t.isOn;else{$("#toggleButton").animate({right:"410px"},500),$("#chat2D").animate({right:"10px"},500),t.isOn=!t.isOn;let s=document.getElementById("myTextArea");setTimeout((()=>{s.focus()}),500)}t.lastResponse=t.timer.globalTime}}render(){}close(){}}const K=t=>180*t/Math.PI;function E(t,s){return Math.sqrt(Math.pow(t.clientX-s.clientX,2)+Math.pow(t.clientY-s.clientY,2))}class R{constructor(t){t.canvas.addEventListener("mousemove",(t=>this.onMouseMove(t))),t.canvas.addEventListener("mousewheel",(t=>this.onMouseWheel(t))),t.canvas.addEventListener("mousedown",(t=>this.onMouseDown(t))),t.canvas.addEventListener("mouseup",(t=>this.onMouseUp(t))),t.canvas.addEventListener("mouseover",(t=>this.mDx=0)),t.canvas.addEventListener("contextmenu",(t=>t.preventDefault())),"ontouchstart"in document.documentElement&&(t.canvas.addEventListener("touchstart",(t=>this.onTouchStart(t))),t.canvas.addEventListener("touchmove",(t=>this.onTouchMove(t))),t.canvas.addEventListener("touchend",(t=>this.onTouchEnd(t)))),window.addEventListener("keydown",(t=>this.onKeyDown(t))),window.addEventListener("keyup",(t=>this.onKeyUp(t))),this.mX=0,this.mY=0,this.mZ=0,this.mDx=0,this.mDy=0,this.mDz=0,this.mButtons=[0,0,0,0,0],this.mButtonsOld=[0,0,0,0,0],this.mButtonsClick=[0,0,0,0,0],this.scaling=!1,this.dist=0,this.scale_factor=1,this.curr_scale=1,this.max_zoom=8,this.min_zoom=.5,this.keys=[],this.keysOld=[],this.keysClick=[],["Enter","Backspace","Delete","Space","Tab","Escape","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Shift","Control","Alt","ShiftLeft","ShiftRight","ControlLeft","ControlRight","PageUp","PageDown","End","Home","Digit0","Digit1","KeyA","KeyW","KeyS","KeyD","KeyG","KeyC","Numpad0","NumpadMultiply","F1"].forEach((t=>{this.keys[t]=0,this.keysOld[t]=0,this.keysClick[t]=0})),this.shiftKey=!1,this.altKey=!1,this.ctrlKey=!1,this.isFirst=!0}onClick(t){}onTouchStart(t){1==t.touches.length?this.mButtons[0]=1:2==t.touches.length?(this.mButtons[0]=0,this.mButtons[2]=1):(this.mButtons[0]=0,this.mButtons[2]=0,this.mButtons[1]=1);let s=t.targetTouches[0].pageX-t.target.offsetLeft,e=t.targetTouches[0].pageY-t.target.offsetTop;this.mDx=0,this.mDy=0,this.mDz=0,this.mX=s,this.mY=e;let i=t.targetTouches;i.length>=2?(this.dist=E(i[0],i[1]),this.scaling=!0):this.scaling=!1}onTouchMove(t){t.preventDefault();let s=t.targetTouches[0].pageX-t.target.offsetLeft,e=t.targetTouches[0].pageY-t.target.offsetTop,i=t.targetTouches;if(this.scaling){this.mDz=0,this.curr_scale=E(i[0],i[1])/this.dist*this.scale_factor;let t=E(i[0],i[1]);if(Math.abs(t-this.dist)>0)return t<this.dist?(this.mDz=t/this.dist*1,this.dist=t):t>this.dist&&(this.mDz=this.dist/t*-1,this.dist=t),this.mZ+=this.mDz,this.mDx=s-this.mX,this.mDy=e-this.mY,this.mX=s,void(this.mY=e)}1==this.mButtons[1]?(this.mDx=0,this.mDy=0,this.mDz=e-this.mZ,this.mX=s,this.mY=e,this.mZ+=this.mDz):(this.mDx=s-this.mX,this.mDy=e-this.mY,this.mDz=0,this.mX=s,this.mY=e)}onTouchEnd(t){this.mButtons[0]=0,this.mButtons[1]=0,this.mButtons[2]=0;let s=t.targetTouches[0].pageX-t.target.offsetLeft,e=t.targetTouches[0].pageY-t.target.offsetTop;this.mDx=0,this.mDy=0,this.mDz=0,this.mX=s,this.mY=e,t.targetTouches.length<2?(this.scaling=!1,this.curr_scale<this.min_zoom?this.scale_factor=this.min_zoom:this.curr_scale>this.max_zoom?this.scale_factor=this.max_zoom:this.scale_factor=this.curr_scale):this.scaling=!0}onMouseMove(t){let s=t.movementX,e=t.movementY;this.mDx=s,this.mDy=e,this.mDz=0,this.mX+=s,this.mY+=e}onMouseWheel(t){0!=t.wheelDelta&&t.preventDefault(),this.mZ+=this.mDz=t.wheelDelta/120}onMouseDown(t){t.preventDefault(),this.mDx=0,this.mDy=0,this.mDz=0,this.mButtonsOld[t.button]=this.mButtons[t.button],this.mButtons[t.button]=1,this.mButtonsClick[t.button]=!this.mButtonsOld[t.button]&&this.mButtons[t.button],this.shiftKey=t.shiftKey,this.altKey=t.altKey,this.ctrlKey=t.ctrlKey}onMouseUp(t){t.preventDefault(),this.mDx=0,this.mDy=0,this.mDz=0,this.mButtonsOld[t.button]=this.mButtons[t.button],this.mButtons[t.button]=0,this.mButtonsClick[t.button]=0,this.shiftKey=t.shiftKey,this.altKey=t.altKey,this.ctrlKey=t.ctrlKey}onKeyDown(t){if("textarea"==t.target.tagName.toLowerCase()||"input"==t.target.tagName.toLowerCase())return;let s=null;document.hasFocus()&&document.activeElement!==document.body&&document.activeElement!==document.documentElement&&(s=document.activeElement,"textarea"==s.tagName.toLowerCase())||("F12"!=t.code&&"F11"!=t.code&&"KeyR"!=t.code&&t.preventDefault(),this.keysOld[t.code]=this.keys[t.code],this.keys[t.code]=1,this.keysClick[t.code]=!this.keysOld[t.code]&&this.keys[t.code],this.shiftKey=t.shiftKey,this.altKey=t.altKey,this.ctrlKey=t.ctrlKey)}onKeyUp(t){if("textarea"==t.target.tagName.toLowerCase())return;let s=null;document.hasFocus()&&document.activeElement!==document.body&&document.activeElement!==document.documentElement&&(s=document.activeElement,"textarea"==s.tagName.toLowerCase())||("F12"!=t.code&&"F11"!=t.code&&"KeyR"!=t.code&&t.preventDefault(),this.keysOld[t.code]=this.keys[t.code],this.keys[t.code]=0,this.keysClick[t.code]=0,this.shiftKey=t.shiftKey,this.altKey=t.altKey,this.ctrlKey=t.ctrlKey)}reset(){this.mDx=0,this.mDy=0,this.mDz=0,this.mButtonsClick.forEach((t=>this.mButtonsClick[t]=0)),this.keysClick.forEach((t=>this.keysClick[t]=0)),this.shiftKey=this.keys.ShiftLeft||this.keys.ShiftRight,this.altKey=this.keys.AltLeft||this.keys.AltRight,this.ctrlKey=this.keys.ControlLeft||this.keys.ControlRight}responseCamera(t){if(this.shiftKey&&this.keysClick.KeyF)t.camera.set(s(5),s(0),s(0,1,0));else{let e=s(t.camera.at).sub(t.camera.loc).len(),i=(t.camera.loc.y-t.camera.at.y)/e,r=Math.sqrt(1-i*i),a=e*r,m=(t.camera.loc.z-t.camera.at.z)/a,n=(t.camera.loc.x-t.camera.at.x)/a,o=K(Math.atan2(n,m)),l=K(Math.atan2(r,i));if(o+=3*t.timer.globalDeltaTime*(-30*this.mButtons[0]*this.mDx+47*(this.keys.ArrowLeft-this.keys.ArrowRight)),l+=2*t.timer.globalDeltaTime*(-30*this.mButtons[0]*this.mDy+47*(this.keys.ArrowUp-this.keys.ArrowDown)),l<.08?l=.08:l>178.9&&(l=178.9),e+=t.timer.globalDeltaTime*(1+18*this.shiftKey)*(8*this.mDz+8*(this.keys.PageUp-this.keys.PageDown)),e<.1&&(e=.1),this.mButtons[2]){let s=t.camera.projSize,i=t.camera.projSize;t.camera.frameW>t.camera.frameH?s*=t.camera.frameW/t.camera.frameH:i*=t.camera.frameH/t.camera.frameW;let h=-this.mDx*s/t.camera.frameW*e/t.camera.projDist,r=this.mDy*i/t.camera.frameH*e/t.camera.projDist,a=t.camera.right.mul(h).add(t.camera.up.mul(r));t.camera.at=t.camera.at.add(a),t.camera.loc=t.camera.loc.add(a)}t.camera.set(s(0,e,0).transform(h.matrRotateX(l).mul(h.matrRotateY(o).mul(h.matrTranslate(t.camera.at)))),t.camera.at,s(0,1,0))}}}function z(...t){return new S(...t)}class S{constructor(t,s){this.isLoad=!1,this.mesh=[],this.scenes=[],t&&s&&(this.prim=this.gltfLoad(t,s))}async gltfLoad(t,e){const i=await fetch(t+"/scene.gltf"),h=await i.text(),r=JSON.parse(h);let a,m=[];this.prims=[];for(let s=0;s<r.buffers.length;s++){let e=r.buffers[s].uri;"data:"!=e.slice(0,5)&&(e=t+"/"+e);let i=await fetch(e);m.push(await i.arrayBuffer())}console.log(r);for(let i=0;i<r.meshes.length;i++){let h=[];for(let n=0;n<r.meshes[i].primitives.length;n++){let o=[];o.push(r.accessors[r.meshes[i].primitives[n].attributes.COLOR_0]),o.push(r.accessors[r.meshes[i].primitives[n].attributes.POSITION]),o.push(r.accessors[r.meshes[i].primitives[n].attributes.NORMAL]),o.push(r.accessors[r.meshes[i].primitives[n].attributes.TEXCOORD_0]),o.push(r.accessors[r.meshes[i].primitives[n].indices]);let l,d,c=r.materials[r.meshes[i].primitives[n].material],u=[],f=[],p=0;c&&(c.pbrMetallicRoughness&&c.pbrMetallicRoughness.baseColorTexture&&(l=c.pbrMetallicRoughness.baseColorTexture.index,r.images[l]&&(f[p]=D("Tex"+p++,t+"/"+r.images[l].uri))),c.emissiveTexture&&(l=c.emissiveTexture.index,r.images[l]&&(f[p]=D("Tex"+p++,t+"/"+r.images[l].uri))),c.extensions&&c.extensions.KHR_materials_pbrSpecularGlossiness&&(l=c.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture.index,r.images[l]&&(f[p]=D("Tex"+p++,t+"/"+r.images[l].uri))),c.normalTexture&&(l=c.normalTexture.index,r.images[l]&&(f[p++]=D("Tex7",t+"/"+r.images[l].uri),f[p-1].isNorm=!0)));let x,b,w,v,B,P=r.bufferViews[o[4].bufferView];o[4].componentType==e.gl.UNSIGNED_SHORT?x=o[4].byteOffset?new Uint16Array(m[P.buffer],P.byteOffset+o[4].byteOffset,o[4].count):new Uint16Array(m[P.buffer],P.byteOffset,o[4].count):o[4].componentType==e.gl.UNSIGNED_INT&&(x=o[4].byteOffset?new Uint32Array(m[P.buffer],P.byteOffset+o[4].byteOffset,o[4].count):new Uint32Array(m[P.buffer],P.byteOffset,o[4].count)),o[0]&&(P=r.bufferViews[o[0].bufferView],P.byteStride?d=P.byteStride/4*o[0].count-P.byteStride/4:(a="VEC4"==o[0].type?4:3,d=o[0].count*a-a),o[0].componentType==e.gl.UNSIGNED_SHORT?B=o[0].byteOffset?new Uint16Array(m[P.buffer],P.byteOffset+o[0].byteOffset,d):new Uint16Array(m[P.buffer],P.byteOffset,d):o[0].componentType==e.gl.FLOAT&&(B=o[0].byteOffset?new Float32Array(m[P.buffer],P.byteOffset+o[0].byteOffset,d):new Float32Array(m[P.buffer],P.byteOffset,d)));let K,E,R,z,S,M=r.bufferViews[o[1].bufferView];d=M.byteStride?o[1].count*M.byteStride/4:3*o[1].count,b=o[1].byteOffset?new Float32Array(m[M.buffer],M.byteOffset+o[1].byteOffset,d):new Float32Array(m[M.buffer],M.byteOffset,d),o[2]&&(K=r.bufferViews[o[2].bufferView],d=K.byteStride?o[2].count*K.byteStride/4-K.byteStride/4:3*o[2].count,w=o[2].byteOffset?new Float32Array(m[K.buffer],K.byteOffset+o[2].byteOffset,d):new Float32Array(m[K.buffer],K.byteOffset,d)),o[3]&&(E=r.bufferViews[o[3].bufferView],E.byteStride?length=o[3].count*E.byteStride/4-E.byteStride/4:length=2*o[3].count,v=o[3].byteOffset?new Float32Array(m[E.buffer],E.byteOffset+o[3].byteOffset,length):new Float32Array(m[E.buffer],E.byteOffset,length));for(let t=0;t<o[1].count;t++)u[t]=y(),u[t].color=B?4==a?[B[4*t],B[4*t+1],B[4*t+2],B[4*t+3]]:[B[4*t],B[4*t+1],B[4*t+2],1]:[0,0,0,0],u[t].pos=s(b[t*M.byteStride/4],b[t*M.byteStride/4+1],b[t*M.byteStride/4+2]),u[t].n=w?s(w[t*K.byteStride/4],w[t*K.byteStride/4+1],w[t*K.byteStride/4+2]):s(0),u[t].tex=v?s(v[t*E.byteStride/4],-v[t*E.byteStride/4+1]):s(0);o[0]&&(R=o[0].componentType),o[2]&&(z=o[2].componentType),o[3]&&(S=o[3].componentType),h.push(T(u,x,e,e.shd[0],!0,r.meshes[i].primitives[0].mode,R,o[1].componentType,z,S)),h[h.length-1].mtl=g.getFromLib("Gold");for(let t=0;t<p;t++)f[t].isNorm?h[h.length-1].mtl.textureAttach(A(f[t],e.gl.TEXTURE_2D,e),7):h[h.length-1].mtl.textureAttach(A(f[t],e.gl.TEXTURE_2D,e),t)}this.mesh[i]=h}return this.prims}draw(t){if(this.mesh[0])for(let s=0;s<this.mesh.length;s++)for(let e=0;e<this.mesh[s].length;e++)this.mesh[s][e].draw(t)}}let M=new WebSocket("ws://localhost:8000");class k{init(t){this.playerName=t.playerName,this.rnd=t,t.isCameraMode=!1,this.character=window.sessionStorage.getItem("userCharecter"),this.characters=[],this.characters[0]=z(),this.characters[0].gltfLoad("bin/models/gltf/mira_up",t),this.characters[1]=z(),this.characters[1].gltfLoad("bin/models/gltf/rigged_lynx_model",t),this.characters[2]=z(),this.characters[2].gltfLoad("bin/models/gltf/fisherman",t),this.characters[0].trans=h.matrRotateX(-90).mul(h.matrRotateY(180).mul(h.scale(s(.0015)))),this.characters[1].trans=h.matrRotateX(-90).mul(h.matrRotateY(180).mul(h.scale(s(.05)))),this.characters[2].trans=h.matrRotateY(180).mul(h.scale(s(.07))),this.goodMode=!1,this.position=s(),this.playerPos=s(),this.bodyRotate=h(),this.speed=0,this.head=0,this.isChange=!1,this.g=10,this.H=.5,function(t){M.onopen=t=>{M.send("Hello from player unit")},M.onmessage=e=>{try{let i=JSON.parse(e.data.toString());"player move"==i.type?i.name==t.playerName?(t.playerPos=s(i.pos),t.bodyRotate=h(i.matr),t.charecter=i.charecter):t.otherPlayer[i.name]={pos:s(i.pos),matr:h(i.matr),charecter:i.charecter}:"event"==i.type&&"disconnection"==i.event&&(t.otherPlayer=[])}catch{}}}(this),this.rnd.canvas.addEventListener("click",(()=>{this.rnd.canvas.requestPointerLock()})),this.otherPlayer=[]}response(){this.isChange=!1,this.goodMode?(this.rnd.input.keys.Space&&(this.position.y+=this.rnd.timer.localDeltaTime,this.isChange=!0),this.rnd.input.shiftKey&&(this.position.y-=this.rnd.timer.localDeltaTime,this.isChange=!0)):this.rnd.input.keys.Space&&!this.isJump&&(this.isJumpUp=!0,this.stratJump=this.rnd.timer.localTime,this.isJump=!0),this.head!=(this.rnd.canvas.width-this.rnd.input.mX)/15&&(this.isChange=!0),this.head2!=-(this.rnd.canvas.height-this.rnd.input.mY)/15&&(this.isChange=!0),this.head=(this.rnd.canvas.width-this.rnd.input.mX)/15,this.head2=-(this.rnd.canvas.height-this.rnd.input.mY)/15,this.rnd.input.keys.KeyG&&this.rnd.input.shiftKey&&(this.goodMode=!this.goodMode),this.rnd.input.keys.KeyC&&this.rnd.input.shiftKey&&(this.rnd.isCameraMode=!this.rnd.isCameraMode),this.speed=this.rnd.timer.localDeltaTime*(this.rnd.input.keys.KeyW-this.rnd.input.keys.KeyS)*60+(this.rnd.input.altKey&&60*this.rnd.input.keys.KeyW*this.rnd.timer.localDeltaTime),this.speed2=this.rnd.timer.localDeltaTime*(this.rnd.input.keys.KeyA-this.rnd.input.keys.KeyD)*30,this.oldTime=this.rnd.timer.localTime,(this.rnd.input.keys.KeyW||this.rnd.input.keys.KeyA||this.rnd.input.keys.KeyD||this.rnd.input.keys.KeyS)&&(this.isChange=!0),this.V=s(0,0,-1).transform(h.matrRotateY(this.head)),this.V2=s(0,0,-1).transform(h.matrRotateY(this.head+90)),this.position=this.position.add(this.V.mul(this.rnd.timer.localDeltaTime*this.speed).add(this.V2.mul(this.rnd.timer.localDeltaTime*this.speed2))),this.bodyRotate=h.matrRotateY(this.head),this.isJump&&(this.dt=this.rnd.timer.localTime-this.stratJump+.01,this.position.y=3.5*this.dt-this.g*this.dt*this.dt/2,this.dt>.5&&(this.isJumping=!0),this.isJumping&&this.position.y<.005&&(this.isJump=!1,this.isJumping=!1,this.position.y=0),this.isChange=!0),this.isChange&&M.send(JSON.stringify({type:"player move",name:this.rnd.playerName,pos:this.position,matr:this.bodyRotate,charecter:this.character})),this.isChange=!1,this.camPosInterest=this.position,this.rnd.isCameraMode||(this.POI=this.position.add(s(0,1,3).transform(h.matrRotateY(this.head))),this.camLoc=this.rnd.camera.loc.add(this.POI.sub(this.rnd.camera.loc).mul(2*this.rnd.timer.localDeltaTime)),this.rnd.camera.set(this.camLoc,this.position,s(0,1,0)))}render(t){this.characters[this.character].draw(this.characters[this.character].trans.mul(this.bodyRotate.mul(h.matrTranslate(this.playerPos))));for(let t in this.otherPlayer)this.characters[this.otherPlayer[t].charecter]&&this.characters[this.otherPlayer[t].charecter].draw(this.characters[this.otherPlayer[t].charecter].trans.mul(this.otherPlayer[t].matr.mul(h.matrTranslate(this.otherPlayer[t].pos))))}close(){}}class L{init(t){this.model=z(),this.model2=z(),this.model3=z(),this.model4=z(),this.model5=z(),this.model6=z()}response(){}render(t){this.model3.draw(h.matrRotateX(0).mul(h.scale(s(.01))))}close(){}}let O=[];O.push(function(...t){return new B(...t)}()),O.push(function(...t){return new P(...t)}()),O.push(function(...t){return new k(...t)}()),O.push(function(...t){return new L(...t)}());class C{init(...t){for(let s of O)s.init(...t)}response(...t){for(let s of O)s.response(...t)}render(...t){for(let s of O)s.render(...t)}close(...t){for(let s of O)s.close(...t)}}function F(...t){return new C(...t)}class _{prims=[];matrs=[];constructor(t,s){if(this.canvas=t,this.gl=this.canvas.getContext("webgl2"),this.gl.enable(this.gl.DEPTH_TEST),null==this.gl)return alert("WebGL2 not supported"),null;this.shd=[],this.shd[0]=function(t,s){return new n(t,s)}("def",this),this.gl.clearColor(.3,.47,.8,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.flag=!1,this.input=new R(this),this.camera=s,this.timer=new m,this.isCameraMode=!0,g.loadLib(this)}resize(t,s){this.camera.setSize(t,s),this.gl.viewport(0,0,this.canvas.width,this.canvas.height)}draw(){const t=()=>{this.gl.clearColor(.3,.47,.8,1),this.flag?(this.timer.response(),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.isCameraMode&&this.input.responseCamera(this),F().response(this),F().render(this)):null!=this.shd[0].id&&(this.shd[0].apply(this),this.shd[0].updateShaderData(this),this.flag=!0,g.init(this),this.shd[0].ubo.apply(this.shd)),window.requestAnimationFrame(t)};t()}}let I,N,U,V,Y,X=new WebSocket("ws://localhost:8000");window.addEventListener("load",(()=>{I=document.getElementById("gameCanv"),N=document.getElementById("chat2D"),U=document.getElementById("messageBox");let t=document.getElementById("myTextArea");X.onopen=t=>{},X.onmessage=t=>{try{let s=JSON.parse(t.data);if("message array"==s.type){for(let t of s.array)t.name==Y.playerName?U.insertAdjacentHTML("beforeend",'<td><div class="message"><div id="myMassege">'+t.text+"</div></div></td>"):V&&V.name==t.name?U.insertAdjacentHTML("beforeend",'<td><div class="message"><div id="otherMessage">'+t.text+"</div></div></td>"):t.logo?U.insertAdjacentHTML("beforeend",`<td><div class="message"><div id="otherMessage"><div id="otherUserName">${t.name}<img src="${t.logo}" class="messageLogo"></div>${t.text}</div></div></td>`):U.insertAdjacentHTML("beforeend",`<td><div class="message"><div id="otherMessage"><div id="otherUserName">${t.name}<img src="bin/images/logo.png" class="messageLogo"></div>${t.text}</div></div></td>`),V=t;N.scrollTo(0,N.scrollHeight)}else if("message"==s.type){s.name==Y.playerName?U.insertAdjacentHTML("beforeend",'<td><div class="message"><div id="newMyMassege">'+s.text+"</div></div></td>"):V&&V.name==s.name?U.insertAdjacentHTML("beforeend",'<td><div class="message"><div id="newOtherMessage">'+s.text+"</div></div></td>"):s.logo?U.insertAdjacentHTML("beforeend",`<td><div class="message"><div id="newOtherMessage"><div id="otherUserName">${s.name}<img src="${s.logo}" class="messageLogo"></div>${s.text}</div></div></td>`):U.insertAdjacentHTML("beforeend",`<td><div class="message"><div id="newOtherMessage"><div id="otherUserName">${s.name}<img src="bin/images/logo.png" class="messageLogo"></div>${s.text}</div></div></td>`),V=s,$("#newMyMassege").hide(),$("#newMyMassege").toggle(1e3).attr("id","myMassege"),$("#newOtherMessage").hide(),$("#newOtherMessage").toggle(1e3).attr("id","otherMessage");let t=setInterval((()=>{N.scrollTo(0,N.scrollHeight)}),10);setTimeout((()=>{clearInterval(t)}),1e3)}}catch{}};let e=`bin/images/${Number(window.sessionStorage.getItem("userCharecter"))+1}.PNG`;I.width=document.body.clientWidth,I.height=window.innerHeight,I.addEventListener("click",(()=>{I.focus(),t.blur()})),t.addEventListener("keyup",(s=>{"Enter"==s.code&&""!=t.value&&(X.send(JSON.stringify({type:"message",name:window.sessionStorage.getItem("userName"),logo:e,text:t.value})),t.value="")})),function(){let t=function(...t){return new a(...t)}();t.set(J,s(0),H),t.setProj(W,j,G),t.setSize(I.width,I.height),Y=function(...t){return new _(...t)}(I,t),Y.playerName=window.sessionStorage.getItem("userName"),F().init(Y),Y.isOn=!1,$("#toggleButton").animate({right:"5px"},500),$("#chat2D").animate({right:"-400px"},500),$("#toggleButton").click((()=>{Y.isOn?($("#toggleButton").animate({right:"5px"},500),$("#chat2D").animate({right:"-400px"},500),Y.isOn=!Y.isOn):($("#toggleButton").animate({right:"410px"},500),$("#chat2D").animate({right:"10px"},500),Y.isOn=!Y.isOn)})),Y.draw()}()})),window.addEventListener("resize",(()=>{I.width=document.body.clientWidth,I.height=window.innerHeight,Y.resize(I.width,I.height)}));const H=s(0,1,0),j=.1,W=.1,G=300,J=s(0,1.5,1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
