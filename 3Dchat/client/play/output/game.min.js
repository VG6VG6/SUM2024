"use strict";class t{constructor(t,s,i){null==t?(this.x=0,this.y=0,this.z=0):"object"==typeof t?3==t.lenght?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==s&&null==i?(this.x=t,this.y=t,this.z=t):null==i?(this.x=t,this.y=s,this.z=0):(this.x=t,this.y=s,this.z=i)}dot(t){return null==t?this:this.x*t.x+this.y*t.y+this.z*t.z}add(t){return null==t?this:"number"==typeof t?s(this.x+t,this.y+t,this.z+t):s(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return null==t?this:"number"==typeof t?s(this.x-t,this.y-t,this.z-t):s(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return null==t?this:"number"==typeof t?s(this.x*t,this.y*t,this.z*t):s(this.x*t.x,this.y*t.y,this.z*t.z)}div(t){return null==t?this:"number"==typeof t?s(this.x/t,this.y/t,this.z/t):s(this.x*t.x,this.y*t.y,this.z*t.z)}transform(t){return s(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2])}pointTransform(t){return s(this.x*t.m[0][0]+this.y*t.m[1][0]+this.z*t.m[2][0]+t.m[3][0],this.x*t.m[0][1]+this.y*t.m[1][1]+this.z*t.m[2][1]+t.m[3][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2]+t.m[3][2])}len(){let t=this.dot(this);return 1==t||0==t?t:Math.sqrt(t)}normalize(){let t=this.len();return 1==t||0==t?this:this.div(t)}cross(t){return null==t?this:s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}}function s(...s){return new t(...s)}function i(t){return t*Math.PI/180}class e{constructor(t=null){null==t||null==t?this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]:"object"==typeof t&&4==t.length?this.m=t:this.m=t.m}mul(t){let s=h();return s.m[0][0]=this.m[0][0]*t.m[0][0]+this.m[0][1]*t.m[1][0]+this.m[0][2]*t.m[2][0]+this.m[0][3]*t.m[3][0],s.m[0][1]=this.m[0][0]*t.m[0][1]+this.m[0][1]*t.m[1][1]+this.m[0][2]*t.m[2][1]+this.m[0][3]*t.m[3][1],s.m[0][2]=this.m[0][0]*t.m[0][2]+this.m[0][1]*t.m[1][2]+this.m[0][2]*t.m[2][2]+this.m[0][3]*t.m[3][2],s.m[0][3]=this.m[0][0]*t.m[0][3]+this.m[0][1]*t.m[1][3]+this.m[0][2]*t.m[2][3]+this.m[0][3]*t.m[3][3],s.m[1][0]=this.m[1][0]*t.m[0][0]+this.m[1][1]*t.m[1][0]+this.m[1][2]*t.m[2][0]+this.m[1][3]*t.m[3][0],s.m[1][1]=this.m[1][0]*t.m[0][1]+this.m[1][1]*t.m[1][1]+this.m[1][2]*t.m[2][1]+this.m[1][3]*t.m[3][1],s.m[1][2]=this.m[1][0]*t.m[0][2]+this.m[1][1]*t.m[1][2]+this.m[1][2]*t.m[2][2]+this.m[1][3]*t.m[3][2],s.m[1][3]=this.m[1][0]*t.m[0][3]+this.m[1][1]*t.m[1][3]+this.m[1][2]*t.m[2][3]+this.m[1][3]*t.m[3][3],s.m[2][0]=this.m[2][0]*t.m[0][0]+this.m[2][1]*t.m[1][0]+this.m[2][2]*t.m[2][0]+this.m[2][3]*t.m[3][0],s.m[2][1]=this.m[2][0]*t.m[0][1]+this.m[2][1]*t.m[1][1]+this.m[2][2]*t.m[2][1]+this.m[2][3]*t.m[3][1],s.m[2][2]=this.m[2][0]*t.m[0][2]+this.m[2][1]*t.m[1][2]+this.m[2][2]*t.m[2][2]+this.m[2][3]*t.m[3][2],s.m[2][3]=this.m[2][0]*t.m[0][3]+this.m[2][1]*t.m[1][3]+this.m[2][2]*t.m[2][3]+this.m[2][3]*t.m[3][3],s.m[3][0]=this.m[3][0]*t.m[0][0]+this.m[3][1]*t.m[1][0]+this.m[3][2]*t.m[2][0]+this.m[3][3]*t.m[3][0],s.m[3][1]=this.m[3][0]*t.m[0][1]+this.m[3][1]*t.m[1][1]+this.m[3][2]*t.m[2][1]+this.m[3][3]*t.m[3][1],s.m[3][2]=this.m[3][0]*t.m[0][2]+this.m[3][1]*t.m[1][2]+this.m[3][2]*t.m[2][2]+this.m[3][3]*t.m[3][2],s.m[3][3]=this.m[3][0]*t.m[0][3]+this.m[3][1]*t.m[1][3]+this.m[3][2]*t.m[2][3]+this.m[3][3]*t.m[3][3],s}determ(){return+this.m[0][0]*matrDeterm3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])+-this.m[0][1]*matrDeterm3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+ +this.m[0][2]*matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])+-this.m[0][3]*matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}inverse(){r=h();let t=this.determ();return 0==t?h():(r.A[0][0]=+matrDeterm3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][0]=-matrDeterm3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][0]=+matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][0]=-matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][1]=-matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][1]=+matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][1]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][1]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][2]=+matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][2]=-matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][2]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][2]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][3]=-matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/t,r.A[1][3]=+matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/t,r.A[2][3]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/t,r.A[3][3]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/t,r)}transponse(){return h(this.m[0][0],this.m[1][0],this.m[2][0],this.m[3][0],this.m[0][1],this.m[1][1],this.m[2][1],this.m[3][1],this.m[0][2],this.m[1][2],this.m[2][2],this.m[3][2],this.m[0][3],this.m[1][3],this.m[2][3],this.m[3][3])}transformPoint(t){return null==t?s():s((t.x,this.m[0][0],t.y,this.m[1][0],t.z,this.m[2][0],this.m[3][0],t.x,this.m[0][1],t.y,this.m[1][1],t.z,this.m[2][1],this.m[3][1],t.x*this.m[0][2]+t.y*this.m[1][2]+t.z*this.m[2][2]+this.m[3][2]))}static matrDeterm3x3(t,s,i,e,h,r,m,a,n){return t*h*n+s*r*m+i*e*a-t*r*a-s*e*n-i*h*m}static matrRotate(t,s){let e=i(t),r=Math.sin(e),m=Math.cos(e);return h([[m+s.x*s.x*(1-m),s.y*s.x*(1-m)-s.z*r,s.z*s.x*(1-m)+s.y*r,0],[s.x*s.y*(1-m)+s.z*r,m+s.y*s.y*(1-m),s.z*s.y*(1-m)-s.x*r,0],[s.x*s.z*(1-m)-s.y*r,s.y*s.z*(1-m)+s.x*r,m+s.z*s.z*(1-m),0],[0,0,0,1]])}static matrRotateX(t){let s=i(t),e=Math.sin(s),r=Math.cos(s);return h([[1,0,0,0],[0,r,e,0],[0,-e,r,0],[0,0,0,1]])}static matrRotateY(t){let s=i(t),e=Math.sin(s),r=Math.cos(s);return h([[r,0,-e,0],[0,1,0,0],[e,0,r,0],[0,0,0,1]])}static matrRotateZ(t){let s=i(t),e=Math.sin(s),r=Math.cos(s);return h([[r,e,0,0],[-e,r,0,0],[0,0,1,0],[0,0,0,1]])}static scale(t){return h([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]])}static matrOrtho(t,s,i,e,r,m){return h([[2/(s-t),0,0,0],[0,2/(e-i),0,0],[0,0,-2/(m-r),0],[-(s+t)/(s-t),-(e+i)/(e-i),-(m+r)/(m-r),1]])}static matrFrustum(t,s,i,e,r,m){return h([[2*r/(s-t),0,0,0],[0,2*r/(e-i),0,0],[(s+t)/(s-t),(e+i)/(e-i),-(m+r)/(m-r),-1],[0,0,-2*r*m/(m-r),0]])}static matrView(t,s,i){let e=s.sub(t).normalize(),r=e.cross(i).normalize(),m=r.cross(e).normalize();return h([[r.x,m.x,-e.x,0],[r.y,m.y,-e.y,0],[r.z,m.z,-e.z,0],[-t.dot(r),-t.dot(m),t.dot(e),1]])}static matrTranslate(t){return h([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]])}}function h(...t){return new e(...t)}h.matrView=(...t)=>e.matrView(...t),h.matrTranslate=(...t)=>e.matrTranslate(...t),h.matrFrustum=(...t)=>e.matrFrustum(...t),h.matrRotateY=(...t)=>e.matrRotateY(...t),h.matrRotate=(...t)=>e.matrRotate(...t),h.matrRotateX=(...t)=>e.matrRotateX(...t),h.matrRotateZ=(...t)=>e.matrRotateZ(...t),h.scale=(...t)=>e.scale(...t);class m{Loc=s();At=s();Dir=s();Right=s();Up=s();matrView=h();MatrProj=h();MatrVP=h();FrameW=0;FrameH=0;Wp=0;Hp=0;ProjSize=0;ProjDist=0;ProjFarClip=0;set(t,i,e){return this.matrView=h.matrView(t,i,e),this.right=s(this.matrView.m[0][0],this.matrView.m[1][0],this.matrView.m[2][0]),this.up=s(this.matrView.m[0][1],this.matrView.m[1][1],this.matrView.m[2][1]),this.dir=s(-this.matrView.m[0][2],-this.matrView.m[1][2],-this.matrView.m[2][2]),this.loc=t,this.at=i,this.MatrVP=this.matrView.mul(this.MatrProj),this}setProj(t,s,i){let e,r;this.ProjDist=s,this.ProjFarClip=i,e=r=this.ProjSize=t,this.FrameW>=this.FrameH?e*=this.FrameW/this.FrameH:r*=this.FrameH/this.FrameW,this.Wp=e,this.Hp=r,this.MatrProj=h.matrFrustum(-e/2,e/2,-r/2,r/2,this.ProjDist,this.ProjFarClip),this.MatrVP=this.matrView.mul(this.MatrProj)}setSize(t,s){this.FrameW=t,this.FrameH=s,this.setProj(this.ProjSize,this.ProjDist,this.ProjFarClip)}}function a(){const t=()=>{const t=new Date;return t.getMilliseconds()/1e3+t.getSeconds()+60*t.getMinutes()};return this.response=(s=null)=>{let i=t();this.globalTime=i,this.globalDeltaTime=i-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=i-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=i-this.pauseTime-this.startTime),this.frameCounter++,i-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(i-this.oldTimeFPS),this.oldTimeFPS=i,this.frameCounter=0,null!=s&&(document.getElementById(s).innerHTML=this.getFPS())),this.oldTime=i},this.getFPS=()=>{this.FPS.toFixed(3)},this.globalTime=this.localTime=t(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}class n{async _init(t,s){this.name=t,this.id=null,this.shaders=[{id:null,type:s.gl.VERTEX_SHADER,name:"vert",src:""},{id:null,type:s.gl.FRAGMENT_SHADER,name:"frag",src:""}];for(const s of this.shaders){let i=await fetch(`bin/shaders/${t}/${s.name}.glsl`),e=await i.text();"string"==typeof e&&""!=e&&(s.src=e)}this.updateShadersSource(s)}updateShadersSource(t){if(this.shaders[0].id=null,this.shaders[1].id=null,this.id=null,""!=this.shaders[0].src&&""!=this.shaders[1].src){if(this.shaders.forEach((s=>{if(s.id=t.gl.createShader(s.type),t.gl.shaderSource(s.id,s.src),t.gl.compileShader(s.id),!t.gl.getShaderParameter(s.id,t.gl.COMPILE_STATUS)){let i=t.gl.getShaderInfoLog(s.id);console.log(`Shader ${this.name}/${s.name} compile fail: ${i}`)}})),this.id=t.gl.createProgram(),this.shaders.forEach((s=>{null!=s.id&&t.gl.attachShader(this.id,s.id)})),t.gl.linkProgram(this.id),!t.gl.getProgramParameter(this.id,t.gl.LINK_STATUS)){let s=t.gl.getProgramInfoLog(this.id);console.log(`Shader program ${this.name} link fail: ${s}`)}this.updateShaderData(t)}}updateShaderData(t){let s=t.gl;this.attrs={};const i=s.getProgramParameter(this.id,s.ACTIVE_ATTRIBUTES);for(let t=0;t<i;t++){const i=s.getActiveAttrib(this.id,t);this.attrs[i.name]={name:i.name,type:i.type,size:i.size,loc:s.getAttribLocation(this.id,i.name)}}this.uniforms={};const e=s.getProgramParameter(this.id,s.ACTIVE_UNIFORMS);for(let t=0;t<e;t++){const i=s.getActiveUniform(this.id,t);this.uniforms[i.name]={name:i.name,type:i.type,size:i.size,loc:s.getUniformLocation(this.id,i.name)}}this.uniformBlocks={};const h=s.getProgramParameter(this.id,s.ACTIVE_UNIFORM_BLOCKS);for(let t=0;t<h;t++){const i=s.getActiveUniformBlockName(this.id,t),e=s.getActiveUniformBlockName(this.id,t);this.uniformBlocks[i]={name:i,index:e,size:s.getActiveUniformBlockParameter(this.id,e,s.UNIFORM_BLOCK_DATA_SIZE),bind:s.getActiveUniformBlockParameter(this.id,e,s.UNIFORM_BLOCK_BINDING)}}}constructor(t,s){this._init(t,s)}apply(t){null!=this.id&&t.gl.useProgram(this.id)}}class o{constructor(t,s,i){this.gl=i.gl,this.type=t,this.size=s,this.id=null,0!=s&&null!=t&&(this.id=this.gl.createBuffer(),this.gl.bindBuffer(t,this.id),this.gl.bufferData(t,s,this.gl.STATIC_DRAW))}update(t){this.gl.bindBuffer(this.type,this.id),this.gl.bufferSubData(this.type,0,t)}}class l extends o{constructor(t,s,i,e){super(e.gl.UNIFORM_BUFFER,s,e),this.gl=e.gl,this.name=t,this.bindPoint=i}apply(t){null!=t&&null!=t.id&&null!=t.uniformBlocks[this.name]&&(this.gl.uniformBlockBinding(t.id,t.uniformBlocks[this.name].index,this.bindPoint),this.gl.bindBufferBase(this.gl.UNIFORM_BUFFER,this.bindPoint,this.id))}}function c(...t){return new l(...t)}const d=[];d.push({name:"Black Plastic",Ka:s(0,0,0),Kd:s(.01,.01,.01),Ks:s(.5,.5,.5),Ph:32}),d.push({name:"Brass",Ka:s(.329412,.223529,.027451),Kd:s(.780392,.568627,.113725),Ks:s(.992157,.941176,.807843),Ph:27.8974}),d.push({name:"Bronze",Ka:s(.2125,.1275,.054),Kd:s(.714,.4284,.18144),Ks:s(.393548,.271906,.166721),Ph:25.6}),d.push({name:"Chrome",Ka:s(.25,.25,.25),Kd:s(.4,.4,.4),Ks:s(.774597,.774597,.774597),Ph:76.8}),d.push({name:"Copper",Ka:s(.19125,.0735,.0225),Kd:s(.7038,.27048,.0828),Ks:s(.256777,.137622,.086014),Ph:12.8}),d.push({name:"Gold",Ka:s(.24725,.1995,.0745),Kd:s(.75164,.60648,.22648),Ks:s(.628281,.555802,.366065),Ph:51.2}),d.push({name:"Peweter",Ka:s(.10588,.058824,.113725),Kd:s(.427451,.470588,.541176),Ks:s(.3333,.3333,.521569),Ph:9.84615}),d.push({name:"Silver",Ka:s(.19225,.19225,.19225),Kd:s(.50754,.50754,.50754),Ks:s(.508273,.508273,.508273),Ph:51.2}),d.push({name:"Polished Silver",Ka:s(.23125,.23125,.23125),Kd:s(.2775,.2775,.2775),Ks:s(.773911,.773911,.773911),Ph:89.6}),d.push({name:"Turquoise",Ka:s(.1,.18725,.1745),Kd:s(.396,.74151,.69102),Ks:s(.297254,.30829,.306678),Ph:12.8}),d.push({name:"Ruby",Ka:s(.1745,.01175,.01175),Kd:s(.61424,.04136,.04136),Ks:s(.727811,.626959,.626959),Ph:76.8}),d.push({name:"Polished Gold",Ka:s(.24725,.2245,.0645),Kd:s(.34615,.3143,.0903),Ks:s(.797357,.723991,.208006),Ph:83.2}),d.push({name:"Polished Bronze",Ka:s(.25,.148,.06475),Kd:s(.4,.2368,.1036),Ks:s(.774597,.458561,.200621),Ph:76.8}),d.push({name:"Polished Copper",Ka:s(.2295,.08825,.0275),Kd:s(.5508,.2118,.066),Ks:s(.580594,.223257,.0695701),Ph:51.2}),d.push({name:"Jade",Ka:s(.135,.2225,.1575),Kd:s(.135,.2225,.1575),Ks:s(.316228,.316228,.316228),Ph:12.8}),d.push({name:"Obsidian",Ka:s(.05375,.05,.06625),Kd:s(.18275,.17,.22525),Ks:s(.332741,.328634,.346435),Ph:38.4}),d.push({name:"Pearl",Ka:s(.25,.20725,.20725),Kd:s(1,.829,.829),Ks:s(.296648,.296648,.296648),Ph:11.264}),d.push({name:"Emerald",Ka:s(.0215,.1745,.0215),Kd:s(.07568,.61424,.07568),Ks:s(.633,.727811,.633),Ph:76.8}),d.push({name:"Black Rubber",Ka:s(.02,.02,.02),Kd:s(.01,.01,.01),Ks:s(.4,.4,.4),Ph:10});class u{constructor(t,i,e,h,r,m){if(null==t)return new u("def",s(.3),s(.47),s(.8),1,m);this.tex=[],this.isTex=[],this.name=t,this.ka=i,this.kd=e,this.ks=h,this.ph=r;for(let t=0;t<8;t++)this.tex[t]=null,this.isTex[t]=0}apply(t,s){if(null!=s.id){s.apply(t),s.ubo.apply(s);for(let s=0;s<this.tex.length;s++)null!=this.tex[s]&&this.tex[s].apply(t,s)}}textureAttach(t,s){s<0||s>8||!t||(this.tex[s]=t,this.isTex[s]=1)}static getFromLib(t,i){for(let s=0;s<d.length;s++)if(d[s].name==t)return new u(d[s].mtl.name,d[s].mtl.ka,d[s].mtl.kd,d[s].mtl.ks,d[s].mtl.ps,i);return new u("def",s(.3),s(.47),s(.8),30,i)}static init(t){for(let s=0;s<t.shd.length;s++)t.shd[s].uniformBlocks.Material?t.shd[s].ubo=c("Material",t.shd[s].uniformBlocks.Material.size,t.shd[s].uniformBlocks.Material.bind,t):console.log("Material is not found")}static loadLib(t){for(let s=0;s<d.length;s++)d[s].mtl=new u(d[s].name,d[s].Ka,d[s].Kd,d[s].Ks,d[s].Ph,t)}}function f(...t){return new u(...t)}f.getFromLib=(...t)=>u.getFromLib(...t),f.init=(...t)=>u.init(...t),f.loadLib=(...t)=>u.loadLib(...t);class g{constructor(t,i,e,h){this.color=t,this.pos=s(i),this.n=s(e),this.tex=s(h)}}function y(...t){return new g(...t)}class p{constructor(t,s,i,e,r,m){this.numOfElements=0;let a=[],n=0;this.trans=h(),this.type=m||i.gl.TRIANGLES,this.minMaxBB(t),r||x(t,s);for(let s of t)a[n++]=s.color[0],a[n++]=s.color[1],a[n++]=s.color[2],a[n++]=s.color[3],a[n++]=s.pos.x,a[n++]=s.pos.y,a[n++]=s.pos.z,a[n++]=s.n.x,a[n++]=s.n.y,a[n++]=s.n.z,a[n++]=s.tex.x,a[n++]=s.tex.y;this.vertexArray=i.gl.createVertexArray(),this.vertexBufer=i.gl.createBuffer(),this.indexArray=i.gl.createBuffer(),this.primLoad=!1,this.rnd=i,this.ind=s,this.points=a,this.shd=e,this.mtl=f()}minMaxBB(t){this.minBB=s(t[0].pos),this.maxBB=s(t[0].pos);for(let s=1;s<t.length;s++){let i=t[s].pos;this.minBB.x>i.x&&(this.minBB.x=i.x),this.maxBB.x<i.x&&(this.maxBB.x=i.x),this.minBB.y>i.y&&(this.minBB.y=i.y),this.maxBB.y<i.y&&(this.maxBB.y=i.y),this.minBB.z>i.z&&(this.minBB.z=i.z),this.maxBB.z<i.z&&(this.maxBB.z=i.z)}}static async loadOBJ(t,i,e){let h=[],r=[],m=await fetch(t),a=(await m.text()).split("\n");for(let t of a){if("v"==t[0]){let i=t.split(" ");b(i);let e=s(parseFloat(i[1]),parseFloat(i[2]),parseFloat(i[3]));h.push(y(e))}if("f"==t[0]){let s=t.split(" ");r.push(parseInt(s[1].split("/")[0])-1),r.push(parseInt(s[2].split("/")[0])-1),r.push(parseInt(s[3].split("/")[0])-1)}}return x(h,r),new p(h,r,i,e)}draw(t){null==t&&(t=h());let s=this.shd;if(this.primLoad||(this.rnd.gl.bindVertexArray(this.vertexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ARRAY_BUFFER,this.vertexBufer),this.rnd.gl.bufferData(this.rnd.gl.ARRAY_BUFFER,new Float32Array(this.points),this.rnd.gl.STATIC_DRAW),s.attrs.InColor&&-1!=s.attrs.InColor.loc&&(this.rnd.gl.vertexAttribPointer(s.attrs.InColor.loc,3,this.rnd.gl.FLOAT,!1,48,0),this.rnd.gl.enableVertexAttribArray(s.attrs.InColor.loc)),-1!=s.attrs.InPosition.loc&&(this.rnd.gl.vertexAttribPointer(s.attrs.InPosition.loc,3,this.rnd.gl.FLOAT,!1,48,16),this.rnd.gl.enableVertexAttribArray(s.attrs.InPosition.loc)),-1!=s.attrs.InNormal.loc&&(this.rnd.gl.vertexAttribPointer(s.attrs.InNormal.loc,3,this.rnd.gl.FLOAT,!1,48,28),this.rnd.gl.enableVertexAttribArray(s.attrs.InNormal.loc)),-1!=s.attrs.InTexCoord.loc&&(this.rnd.gl.vertexAttribPointer(s.attrs.InTexCoord.loc,3,this.rnd.gl.FLOAT,!1,48,40),this.rnd.gl.enableVertexAttribArray(s.attrs.InTexCoord.loc)),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),this.rnd.gl.bufferData(this.rnd.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(this.ind),this.rnd.gl.STATIC_DRAW),this.numOfElements=this.ind.length,this.primLoad=!0),this.mtl){let t=[];t.push(this.mtl.ka.x),t.push(this.mtl.ka.y),t.push(this.mtl.ka.z),t.push(0),t.push(this.mtl.kd.x),t.push(this.mtl.kd.y),t.push(this.mtl.kd.z),t.push(0),t.push(this.mtl.ks.x),t.push(this.mtl.ks.y),t.push(this.mtl.ks.z),t.push(this.mtl.ph);for(let s=0;s<8;s++)t.push(this.mtl.isTex[s]),this.mtl.isTex[s]&&(this.rnd.gl.activeTexture(this.rnd.gl.TEXTURE0+s),this.rnd.gl.bindTexture(this.mtl.tex[s].type,this.mtl.tex[s].id));s.ubo.update(new Float32Array(t)),this.mtl.apply(this.rnd,this.shd)}this.world=this.trans.mul(t),this.shd,this.rnd.gl.bindVertexArray(this.vertexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ARRAY_BUFFER,this.vertexBufer),s.uniforms.CamDir&&-1!=s.uniforms.CamDir.loc&&this.rnd.gl.uniform3f(s.uniforms.CamDir.loc,!1,this.rnd.camera.Dir.x,this.rnd.camera.Dir.y,this.rnd.camera.Dir.z),s.uniforms.CamLoc&&-1!=s.uniforms.CamLoc.loc&&this.rnd.gl.uniform3f(s.uniforms.CamLoc.loc,!1,this.rnd.camera.Loc.x,this.rnd.camera.Loc.y,this.rnd.camera.Loc.z),s.uniforms.World&&-1!=s.uniforms.World.loc&&this.rnd.gl.uniformMatrix4fv(s.uniforms.World.loc,!1,new Float32Array([].concat(...this.world.m))),s.uniforms.VP&&-1!=s.uniforms.VP.loc&&this.rnd.gl.uniformMatrix4fv(s.uniforms.VP.loc,!1,new Float32Array([].concat(...this.rnd.camera.MatrVP.m)));for(let t=0;t<8;t++)s.uniforms[`Tex${t}`]&&-1!=s.uniforms[`Tex${t}`].loc&&this.rnd.gl.uniform1i(s.uniforms[`Tex${t}`].loc,t);this.numOfElements>0?this.rnd.gl.drawElements(this.type,this.numOfElements,this.rnd.gl.UNSIGNED_INT,0):this.rnd.gl.drawArrays(this.type,0,this.numOfElements)}}function x(t,i){let e;for(e=0;e<t.length;e++)t[e].n=s(0);for(e=0;e<i.length;e+=3){let s=i[e],h=i[e+1],r=i[e+2],m=t[s].pos,a=t[h].pos,n=t[r].pos,o=a.sub(m).cross(n.sub(m)).normalize();t[s].n=t[s].n.add(o),t[h].n=t[h].n.add(o),t[r].n=t[r].n.add(o)}for(e=0;e<t.length;e++)t[e].n=t[e].n.normalize()}function b(t){for(let s=0;s<t.length;s++)""==t[s]&&(t.splice(s,1),s--)}function w(...t){return new p(...t)}class T{constructor(t,s){this.name=t,this.img=new Image,this.img.src=s}}function A(...t){return new T(...t)}class v{constructor(t,s,i){this.name=t.name,this.type=s,this.id=i.gl.createTexture(),this.gl=i.gl,this.gl.bindTexture(this.type,this.id),t.img&&(this.gl.texImage2D(this.type,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,new Uint8Array([255,255,255,0])),t.img.onload=()=>{this.gl.bindTexture(this.type,this.id),this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!0),this.gl.texImage2D(this.type,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,t.img),this.gl.generateMipmap(this.type),this.gl.texParameteri(this.type,this.gl.TEXTURE_WRAP_S,this.gl.REPEAT),this.gl.texParameteri(this.type,this.gl.TEXTURE_WRAP_T,this.gl.REPEAT),this.gl.texParameteri(this.type,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR_MIPMAP_LINEAR),this.gl.texParameteri(this.type,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR)})}apply(t,s){t.gl.activeTexture(t.gl.TEXTURE0+s),t.gl.bindTexture(this.type,this.id)}}function D(...t){return new v(...t)}function B(t){return 180*t/Math.PI}class z{init(){}response(t){let i,e,r,m,a,n,o,l;if(t.isMove&&(i=t.camera.At.sub(t.camera.Loc).len(),e=(t.camera.Loc.y-t.camera.At.y)/i,r=Math.sqrt(1-e*e),m=i*r,a=(t.camera.Loc.z-t.camera.At.z)/m,n=(t.camera.Loc.x-t.camera.At.x)/m,o=B(Math.atan2(n,a)),l=B(Math.atan2(r,e)),l+=-1*t.Mdy,l<.08&&(l=.08),l>178.9&&(l=178.9),i+=.001*t.Mdz,i<.1&&(i=.1),t.camera.set(s(0,i,0).transform(h.matrRotateX(l).mul(h.matrRotateY(o).mul(h.matrTranslate(t.camera.At)))),t.camera.At,s(0,1,0))),t.input.keysClick.KeyP&&(t.timer.isPause=!t.timer.isPause),t.input.keysClick.Tab&&t.IsOn){document.getElementById("myTextArea").focus()}}render(){}close(){}}const P=t=>180*t/Math.PI;function E(t,s){return Math.sqrt(Math.pow(t.clientX-s.clientX,2)+Math.pow(t.clientY-s.clientY,2))}class K{constructor(t){t.canvas.addEventListener("mousemove",(t=>this.onMouseMove(t))),t.canvas.addEventListener("mousewheel",(t=>this.onMouseWheel(t))),t.canvas.addEventListener("mousedown",(t=>this.onMouseDown(t))),t.canvas.addEventListener("mouseup",(t=>this.onMouseUp(t))),t.canvas.addEventListener("mouseover",(t=>this.mDx=0)),t.canvas.addEventListener("contextmenu",(t=>t.preventDefault())),"ontouchstart"in document.documentElement&&(t.canvas.addEventListener("touchstart",(t=>this.onTouchStart(t))),t.canvas.addEventListener("touchmove",(t=>this.onTouchMove(t))),t.canvas.addEventListener("touchend",(t=>this.onTouchEnd(t)))),window.addEventListener("keydown",(t=>this.onKeyDown(t))),window.addEventListener("keyup",(t=>this.onKeyUp(t))),this.mX=0,this.mY=0,this.mZ=0,this.mDx=0,this.mDy=0,this.mDz=0,this.mButtons=[0,0,0,0,0],this.mButtonsOld=[0,0,0,0,0],this.mButtonsClick=[0,0,0,0,0],this.scaling=!1,this.dist=0,this.scale_factor=1,this.curr_scale=1,this.max_zoom=8,this.min_zoom=.5,this.keys=[],this.keysOld=[],this.keysClick=[],["Enter","Backspace","Delete","Space","Tab","Escape","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Shift","Control","Alt","ShiftLeft","ShiftRight","ControlLeft","ControlRight","PageUp","PageDown","End","Home","Digit0","Digit1","KeyA","KeyW","KeyS","KeyD","Numpad0","NumpadMultiply","F1"].forEach((t=>{this.keys[t]=0,this.keysOld[t]=0,this.keysClick[t]=0})),this.shiftKey=!1,this.altKey=!1,this.ctrlKey=!1,this.isFirst=!0}onClick(t){}onTouchStart(t){1==t.touches.length?this.mButtons[0]=1:2==t.touches.length?(this.mButtons[0]=0,this.mButtons[2]=1):(this.mButtons[0]=0,this.mButtons[2]=0,this.mButtons[1]=1);let s=t.targetTouches[0].pageX-t.target.offsetLeft,i=t.targetTouches[0].pageY-t.target.offsetTop;this.mDx=0,this.mDy=0,this.mDz=0,this.mX=s,this.mY=i;let e=t.targetTouches;e.length>=2?(this.dist=E(e[0],e[1]),this.scaling=!0):this.scaling=!1}onTouchMove(t){t.preventDefault();let s=t.targetTouches[0].pageX-t.target.offsetLeft,i=t.targetTouches[0].pageY-t.target.offsetTop,e=t.targetTouches;if(this.scaling){this.mDz=0,this.curr_scale=E(e[0],e[1])/this.dist*this.scale_factor;let t=E(e[0],e[1]);if(Math.abs(t-this.dist)>0)return t<this.dist?(this.mDz=t/this.dist*1,this.dist=t):t>this.dist&&(this.mDz=this.dist/t*-1,this.dist=t),this.mZ+=this.mDz,this.mDx=s-this.mX,this.mDy=i-this.mY,this.mX=s,void(this.mY=i)}1==this.mButtons[1]?(this.mDx=0,this.mDy=0,this.mDz=i-this.mZ,this.mX=s,this.mY=i,this.mZ+=this.mDz):(this.mDx=s-this.mX,this.mDy=i-this.mY,this.mDz=0,this.mX=s,this.mY=i)}onTouchEnd(t){this.mButtons[0]=0,this.mButtons[1]=0,this.mButtons[2]=0;let s=t.targetTouches[0].pageX-t.target.offsetLeft,i=t.targetTouches[0].pageY-t.target.offsetTop;this.mDx=0,this.mDy=0,this.mDz=0,this.mX=s,this.mY=i,t.targetTouches.length<2?(this.scaling=!1,this.curr_scale<this.min_zoom?this.scale_factor=this.min_zoom:this.curr_scale>this.max_zoom?this.scale_factor=this.max_zoom:this.scale_factor=this.curr_scale):this.scaling=!0}onMouseMove(t){let s=t.movementX,i=t.movementY;this.mDx=s,this.mDy=i,this.mDz=0,this.mX+=s,this.mY+=i}onMouseWheel(t){0!=t.wheelDelta&&t.preventDefault(),this.mZ+=this.mDz=t.wheelDelta/120}onMouseDown(t){t.preventDefault(),this.mDx=0,this.mDy=0,this.mDz=0,this.mButtonsOld[t.button]=this.mButtons[t.button],this.mButtons[t.button]=1,this.mButtonsClick[t.button]=!this.mButtonsOld[t.button]&&this.mButtons[t.button],this.shiftKey=t.shiftKey,this.altKey=t.altKey,this.ctrlKey=t.ctrlKey}onMouseUp(t){t.preventDefault(),this.mDx=0,this.mDy=0,this.mDz=0,this.mButtonsOld[t.button]=this.mButtons[t.button],this.mButtons[t.button]=0,this.mButtonsClick[t.button]=0,this.shiftKey=t.shiftKey,this.altKey=t.altKey,this.ctrlKey=t.ctrlKey}onKeyDown(t){if("textarea"==t.target.tagName.toLowerCase()||"input"==t.target.tagName.toLowerCase())return;let s=null;document.hasFocus()&&document.activeElement!==document.body&&document.activeElement!==document.documentElement&&(s=document.activeElement,"textarea"==s.tagName.toLowerCase())||("F12"!=t.code&&"F11"!=t.code&&"KeyR"!=t.code&&t.preventDefault(),this.keysOld[t.code]=this.keys[t.code],this.keys[t.code]=1,this.keysClick[t.code]=!this.keysOld[t.code]&&this.keys[t.code],this.shiftKey=t.shiftKey,this.altKey=t.altKey,this.ctrlKey=t.ctrlKey)}onKeyUp(t){if("textarea"==t.target.tagName.toLowerCase())return;let s=null;document.hasFocus()&&document.activeElement!==document.body&&document.activeElement!==document.documentElement&&(s=document.activeElement,"textarea"==s.tagName.toLowerCase())||("F12"!=t.code&&"F11"!=t.code&&"KeyR"!=t.code&&t.preventDefault(),this.keysOld[t.code]=this.keys[t.code],this.keys[t.code]=0,this.keysClick[t.code]=0,this.shiftKey=t.shiftKey,this.altKey=t.altKey,this.ctrlKey=t.ctrlKey)}reset(){this.mDx=0,this.mDy=0,this.mDz=0,this.mButtonsClick.forEach((t=>this.mButtonsClick[t]=0)),this.keysClick.forEach((t=>this.keysClick[t]=0)),this.shiftKey=this.keys.ShiftLeft||this.keys.ShiftRight,this.altKey=this.keys.AltLeft||this.keys.AltRight,this.ctrlKey=this.keys.ControlLeft||this.keys.ControlRight}responseCamera(t){if(this.shiftKey&&this.keysClick.KeyF)t.camera.set(s(5),s(0),s(0,1,0));else{let i=s(t.camera.at).sub(t.camera.loc).len(),e=(t.camera.loc.y-t.camera.at.y)/i,r=Math.sqrt(1-e*e),m=i*r,a=(t.camera.loc.z-t.camera.at.z)/m,n=(t.camera.loc.x-t.camera.at.x)/m,o=P(Math.atan2(n,a)),l=P(Math.atan2(r,e));if(o+=3*t.timer.globalDeltaTime*(-30*this.mButtons[0]*this.mDx+47*(this.keys.ArrowLeft-this.keys.ArrowRight)),l+=2*t.timer.globalDeltaTime*(-30*this.mButtons[0]*this.mDy+47*(this.keys.ArrowUp-this.keys.ArrowDown)),l<.08?l=.08:l>178.9&&(l=178.9),i+=t.timer.globalDeltaTime*(1+18*this.shiftKey)*(8*this.mDz+8*(this.keys.PageUp-this.keys.PageDown)),i<.1&&(i=.1),this.mButtons[2]){let s=t.camera.projSize,e=t.camera.projSize;t.camera.frameW>t.camera.frameH?s*=t.camera.frameW/t.camera.frameH:e*=t.camera.frameH/t.camera.frameW;let h=-this.mDx*s/t.camera.frameW*i/t.camera.projDist,r=this.mDy*e/t.camera.frameH*i/t.camera.projDist,m=t.camera.right.mul(h).add(t.camera.up.mul(r));t.camera.at=t.camera.at.add(m),t.camera.loc=t.camera.loc.add(m)}t.camera.set(s(0,i,0).transform(h.matrRotateX(l).mul(h.matrRotateY(o).mul(h.matrTranslate(t.camera.at)))),t.camera.at,s(0,1,0))}}}new WebSocket("ws://localhost:8000");class M{constructor(t,s){this.isLoad=!1,t&&s&&(this.prim=this.gltfLoad(t,s))}async gltfLoad(t,i){const e=await fetch(t+"/scene.gltf"),h=await e.text(),r=JSON.parse(h);let m=[];this.prims=[];for(let s=0;s<r.buffers.length;s++){let i=await fetch(t+"/"+r.buffers[s].uri);m.push(await i.arrayBuffer())}console.log(r);for(let e=0;e<r.meshes.length;e++){let h=[];h.push(r.accessors[r.meshes[e].primitives[0].attributes.COLOR_0]),h.push(r.accessors[r.meshes[e].primitives[0].attributes.POSITION]),h.push(r.accessors[r.meshes[e].primitives[0].attributes.NORMAL]),h.push(r.accessors[r.meshes[e].primitives[0].attributes.TEXCOORD_0]),h.push(r.accessors[r.meshes[e].primitives[0].indices]);let a,n,o=r.materials[r.meshes[e].primitives[0].material],l=[];o.pbrMetallicRoughness.baseColorTexture&&(a=o.pbrMetallicRoughness.baseColorTexture.index,n=A(`Tex${e}`,t+"/"+r.images[a].uri));let c,d,u,g,p,x=r.bufferViews[h[4].bufferView];c=h[4].byteOffset?new Uint32Array(m[x.buffer],x.byteOffset+h[4].byteOffset,h[4].count):new Uint32Array(m[x.buffer],x.byteOffset,h[4].count),h[0]&&(x=r.bufferViews[h[0].bufferView],p=h[0].byteOffset?new Float32Array(m[x.buffer],x.byteOffset+h[0].byteOffset,4*h[0].count):new Float32Array(m[x.buffer],x.byteOffset,4*h[0].count)),x=r.bufferViews[h[1].bufferView],d=h[1].byteOffset?new Float32Array(m[x.buffer],x.byteOffset+h[1].byteOffset,3*h[1].count):new Float32Array(m[x.buffer],x.byteOffset,3*h[1].count),x=r.bufferViews[h[2].bufferView],u=h[2].byteOffset?new Float32Array(m[x.buffer],x.byteOffset+h[2].byteOffset,3*h[2].count):new Float32Array(m[x.buffer],x.byteOffset,3*h[2].count),x=r.bufferViews[h[3].bufferView],g=h[3].byteOffset?new Float32Array(m[x.buffer],x.byteOffset+h[3].byteOffset,2*h[3].count):new Float32Array(m[x.buffer],x.byteOffset,2*h[3].count);for(let t=0;t<h[1].count;t++)l[t]=y(),l[t].color=p?[p[4*t],p[4*t+1],p[4*t+2],p[4*t+3]]:[0,0,0,0],l[t].pos=s(d[3*t],d[3*t+1],d[3*t+2]),l[t].n=s(u[3*t],u[3*t+1],u[3*t+2]),l[t].tex=s(g[2*t],g[2*t+1]);this.prims.push(w(l,c,i,i.shd[0],!0,r.meshes[e].primitives[0].mode)),this.prims[this.prims.length-1].mtl=f(),o.pbrMetallicRoughness.baseColorTexture&&this.prims[this.prims.length-1].mtl.textureAttach(D(n,i.gl.TEXTURE_2D,i),0)}return this.prims}}class L{init(t){this.model=function(...t){return new M(...t)}(),this.model.gltfLoad("bin/models/gltf/sea_keep_lonely_watcher",t)}response(){}render(t){if(this.model.prims)for(let t=0;t<this.model.prims.length;t++)this.model.prims[t].draw(h.matrRotateX(-90).mul(h.scale(s(.015))))}close(){}}let R=[];R.push(function(...t){return new z(...t)}()),R.push(function(...t){return new L(...t)}());class F{init(...t){for(let s of R)s.init(...t)}response(...t){for(let s of R)s.response(...t)}render(...t){for(let s of R)s.render(...t)}close(...t){for(let s of R)s.close(...t)}}function k(...t){return new F(...t)}class O{prims=[];matrs=[];constructor(t,s){if(this.canvas=t,this.gl=this.canvas.getContext("webgl2"),this.gl.enable(this.gl.DEPTH_TEST),null==this.gl)return alert("WebGL2 not supported"),null;this.shd=[],this.shd[0]=function(t,s){return new n(t,s)}("def",this),this.gl.clearColor(.3,.47,.8,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.flag=!1,this.input=new K(this),this.camera=s,this.timer=new a,f.loadLib(this)}resize(t,s){this.camera.setSize(t,s),this.gl.viewport(0,0,this.canvas.width,this.canvas.height)}draw(){const t=()=>{this.gl.clearColor(.3,.47,.8,1),this.flag?(this.timer.response(),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.input.responseCamera(this),k().response(this),k().render(this)):null!=this.shd[0].id&&(this.shd[0].apply(this),this.shd[0].updateShaderData(this),this.flag=!0,f.init(this),this.shd[0].ubo.apply(this.shd)),window.requestAnimationFrame(t)};t()}}let C,S,_,I,U,N=new WebSocket("ws://localhost:8000");window.addEventListener("load",(()=>{C=document.getElementById("gameCanv"),S=document.getElementById("chat2D"),_=document.getElementById("messageBox");let t=document.getElementById("myTextArea");N.onopen=t=>{},N.onmessage=t=>{try{let s=JSON.parse(t.data);if("message array"==s.type){for(let t of s.array)t.name==U.playerName?_.insertAdjacentHTML("beforeend",'<td><div class="message"><div id="myMassege">'+t.text+"</div></div></td>"):I&&I.name==t.name?_.insertAdjacentHTML("beforeend",'<td><div class="message"><div id="otherMessage">'+t.text+"</div></div></td>"):t.logo?_.insertAdjacentHTML("beforeend",`<td><div class="message"><div id="otherMessage"><div id="otherUserName">${t.name}<img src="${t.logo}" class="messageLogo"></div>${t.text}</div></div></td>`):_.insertAdjacentHTML("beforeend",`<td><div class="message"><div id="otherMessage"><div id="otherUserName">${t.name}<img src="bin/images/logo.png" class="messageLogo"></div>${t.text}</div></div></td>`),I=t;S.scrollTo(0,S.scrollHeight)}else if("message"==s.type){s.name==U.playerName?_.insertAdjacentHTML("beforeend",'<td><div class="message"><div id="newMyMassege">'+s.text+"</div></div></td>"):I&&I.name==s.name?_.insertAdjacentHTML("beforeend",'<td><div class="message"><div id="newOtherMessage">'+s.text+"</div></div></td>"):s.logo?_.insertAdjacentHTML("beforeend",`<td><div class="message"><div id="newOtherMessage"><div id="otherUserName">${s.name}<img src="${s.logo}" class="messageLogo"></div>${s.text}</div></div></td>`):_.insertAdjacentHTML("beforeend",`<td><div class="message"><div id="newOtherMessage"><div id="otherUserName">${s.name}<img src="bin/images/logo.png" class="messageLogo"></div>${s.text}</div></div></td>`),I=s,$("#newMyMassege").hide(),$("#newMyMassege").toggle(1e3).attr("id","myMassege"),$("#newOtherMessage").hide(),$("#newOtherMessage").toggle(1e3).attr("id","otherMessage");let t=setInterval((()=>{S.scrollTo(0,S.scrollHeight)}),10);setTimeout((()=>{clearInterval(t)}),1e3)}}catch{}},C.width=document.body.clientWidth,C.height=window.innerHeight,C.addEventListener("click",(()=>{C.focus(),t.blur()})),t.addEventListener("keyup",(s=>{"Enter"==s.code&&""!=t.value&&(N.send(JSON.stringify({type:"message",name:window.sessionStorage.getItem("userName"),text:t.value})),t.value="")})),function(){let t=function(...t){return new m(...t)}();t.set(H,s(0),V),t.setProj(X,j,Y),t.setSize(C.width,C.height),U=function(...t){return new O(...t)}(C,t),U.playerName=window.sessionStorage.getItem("userName"),k().init(U),U.isOn=!1,$("#toggleButton").animate({right:"5px"},500),$("#chat2D").animate({right:"-400px"},500),$("#toggleButton").click((()=>{U.isOn?($("#toggleButton").animate({right:"5px"},500),$("#chat2D").animate({right:"-400px"},500),U.isOn=!U.isOn):($("#toggleButton").animate({right:"410px"},500),$("#chat2D").animate({right:"10px"},500),U.isOn=!U.isOn)})),U.draw()}()})),window.addEventListener("resize",(()=>{C.width=document.body.clientWidth,C.height=window.innerHeight,U.resize(C.width,C.height)}));const V=s(0,1,0),j=.1,X=.1,Y=300,H=s(0,1.5,1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
