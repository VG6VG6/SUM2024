"use strict";class t{constructor(t,i,s){null==t?(this.x=0,this.x,this.z=0):"object"==typeof t?3==t.lenght?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==i&&null==s?(this.x=t,this.y=t,this.z=t):null==s?(this.x=t,this.y=i,this.z=0):(this.x=t,this.y=i,this.z=s)}dot(t){return null==t?this:this.x*t.x+this.y*t.y+this.z*t.z}add(t){return null==t?this:"number"==typeof t?i(this.x+t,this.y+t,this.z+t):i(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return null==t?this:"number"==typeof t?i(this.x-t,this.y-t,this.z-t):i(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return null==t?this:"number"==typeof t?i(this.x*t,this.y*t,this.z*t):i(this.x*t.x,this.y*t.y,this.z*t.z)}div(t){return null==t?this:"number"==typeof t?i(this.x/t,this.y/t,this.z/t):i(this.x*t.x,this.y*t.y,this.z*t.z)}transform(t){return null==t?this:i((this.x,t.m[0][0],this.y,t.m[1][0],this.z,t.m[2][0],t.m[3][0],this.x,t.m[0][1],this.y,t.m[1][1],this.z,t.m[2][1],t.m[3][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2]+t.m[3][2]))}len(){let t=this.dot(this);return 1==t||0==t?t:Math.sqrt(t)}normalize(){let t=this.len();return 1==t||0==t?this:this.div(t)}cross(t){return null==t?this:i(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}}function i(...i){return new t(...i)}function s(t){return t*Math.PI/180}class h{constructor(t=null){null==t||null==t?this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]:"object"==typeof t&&4==t.length?this.m=t:this.m=t.m}mul(t){let i=e();return i.m[0][0]=this.m[0][0]*t.m[0][0]+this.m[0][1]*t.m[1][0]+this.m[0][2]*t.m[2][0]+this.m[0][3]*t.m[3][0],i.m[0][1]=this.m[0][0]*t.m[0][1]+this.m[0][1]*t.m[1][1]+this.m[0][2]*t.m[2][1]+this.m[0][3]*t.m[3][1],i.m[0][2]=this.m[0][0]*t.m[0][2]+this.m[0][1]*t.m[1][2]+this.m[0][2]*t.m[2][2]+this.m[0][3]*t.m[3][2],i.m[0][3]=this.m[0][0]*t.m[0][3]+this.m[0][1]*t.m[1][3]+this.m[0][2]*t.m[2][3]+this.m[0][3]*t.m[3][3],i.m[1][0]=this.m[1][0]*t.m[0][0]+this.m[1][1]*t.m[1][0]+this.m[1][2]*t.m[2][0]+this.m[1][3]*t.m[3][0],i.m[1][1]=this.m[1][0]*t.m[0][1]+this.m[1][1]*t.m[1][1]+this.m[1][2]*t.m[2][1]+this.m[1][3]*t.m[3][1],i.m[1][2]=this.m[1][0]*t.m[0][2]+this.m[1][1]*t.m[1][2]+this.m[1][2]*t.m[2][2]+this.m[1][3]*t.m[3][2],i.m[1][3]=this.m[1][0]*t.m[0][3]+this.m[1][1]*t.m[1][3]+this.m[1][2]*t.m[2][3]+this.m[1][3]*t.m[3][3],i.m[2][0]=this.m[2][0]*t.m[0][0]+this.m[2][1]*t.m[1][0]+this.m[2][2]*t.m[2][0]+this.m[2][3]*t.m[3][0],i.m[2][1]=this.m[2][0]*t.m[0][1]+this.m[2][1]*t.m[1][1]+this.m[2][2]*t.m[2][1]+this.m[2][3]*t.m[3][1],i.m[2][2]=this.m[2][0]*t.m[0][2]+this.m[2][1]*t.m[1][2]+this.m[2][2]*t.m[2][2]+this.m[2][3]*t.m[3][2],i.m[2][3]=this.m[2][0]*t.m[0][3]+this.m[2][1]*t.m[1][3]+this.m[2][2]*t.m[2][3]+this.m[2][3]*t.m[3][3],i.m[3][0]=this.m[3][0]*t.m[0][0]+this.m[3][1]*t.m[1][0]+this.m[3][2]*t.m[2][0]+this.m[3][3]*t.m[3][0],i.m[3][1]=this.m[3][0]*t.m[0][1]+this.m[3][1]*t.m[1][1]+this.m[3][2]*t.m[2][1]+this.m[3][3]*t.m[3][1],i.m[3][2]=this.m[3][0]*t.m[0][2]+this.m[3][1]*t.m[1][2]+this.m[3][2]*t.m[2][2]+this.m[3][3]*t.m[3][2],i.m[3][3]=this.m[3][0]*t.m[0][3]+this.m[3][1]*t.m[1][3]+this.m[3][2]*t.m[2][3]+this.m[3][3]*t.m[3][3],i}determ(){return+this.m[0][0]*matrDeterm3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])+-this.m[0][1]*matrDeterm3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+ +this.m[0][2]*matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])+-this.m[0][3]*matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}inverse(){r=e();let t=this.determ();return 0==t?e():(r.A[0][0]=+matrDeterm3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][0]=-matrDeterm3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][0]=+matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][0]=-matrDeterm3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][1]=-matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][1]=+matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][1]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][1]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][2]=+matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][2]=-matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][2]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][2]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][3]=-matrDeterm3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/t,r.A[1][3]=+matrDeterm3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/t,r.A[2][3]=-matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/t,r.A[3][3]=+matrDeterm3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/t,r)}transponse(){return e(this.m[0][0],this.m[1][0],this.m[2][0],this.m[3][0],this.m[0][1],this.m[1][1],this.m[2][1],this.m[3][1],this.m[0][2],this.m[1][2],this.m[2][2],this.m[3][2],this.m[0][3],this.m[1][3],this.m[2][3],this.m[3][3])}static matrDeterm3x3(t,i,s,h,e,m,r,a,n){return t*e*n+i*m*r+s*h*a-t*m*a-i*h*n-s*e*r}static matrRotate(t,i){let h=s(t),m=Math.sin(h),r=Math.cos(h);return e([[r+i.x*i.x*(1-r),i.y*i.x*(1-r)-i.z*m,i.z*i.x*(1-r)+i.y*m,0],[i.x*i.y*(1-r)+i.z*m,r+i.y*i.y*(1-r),i.z*i.y*(1-r)-i.x*m,0],[i.x*i.z*(1-r)-i.y*m,i.y*i.z*(1-r)+i.x*m,r+i.z*i.z*(1-r),0],[0,0,0,1]])}static matrRotateX(t){let i=s(t),h=Math.sin(i),m=Math.cos(i);return e([[1,0,0,0],[0,m,h,0],[0,-h,m,0],[0,0,0,1]])}static matrRotateY(t){let i=s(t),h=Math.sin(i),m=Math.cos(i);return e([[m,0,-h,0],[0,1,0,0],[h,0,m,0],[0,0,0,1]])}static matrRotateZ(t){let i=s(t),h=Math.sin(i),m=Math.cos(i);return e([[m,h,0,0],[-h,m,0,0],[0,0,1,0],[0,0,0,1]])}static scale(t){return e([[t.x,0,0,0],[0,t.y,0,0],[0,0,t.z,0],[0,0,0,1]])}static matrOrtho(t,i,s,h,m,r){return e([[2/(i-t),0,0,0],[0,2/(h-s),0,0],[0,0,-2/(r-m),0],[-(i+t)/(i-t),-(h+s)/(h-s),-(r+m)/(r-m),1]])}static matrFrustum(t,i,s,h,m,r){return e([[2*m/(i-t),0,0,0],[0,2*m/(h-s),0,0],[(i+t)/(i-t),(h+s)/(h-s),-(r+m)/(r-m),-1],[0,0,-2*m*r/(r-m),0]])}static matrView(t,i,s){let h=i.sub(t).normalize(),m=h.cross(s).normalize(),r=m.cross(h).normalize();return e([[m.x,r.x,-h.x,0],[m.y,r.y,-h.y,0],[m.z,r.z,-h.z,0],[-t.dot(m),-t.dot(r),t.dot(h),1]])}static matrTranslate(t){return e([[1,0,0,0],[0,1,0,0],[0,0,1,0],[t.x,t.y,t.z,1]])}}function e(...t){return new h(...t)}e.matrView=(...t)=>h.matrView(...t),e.matrTranslate=(...t)=>h.matrTranslate(...t),e.matrFrustum=(...t)=>h.matrFrustum(...t),e.matrRotateY=(...t)=>h.matrRotateY(...t),e.matrRotate=(...t)=>h.matrRotate(...t),e.matrRotateX=(...t)=>h.matrRotateX(...t),e.matrRotateZ=(...t)=>h.matrRotateZ(...t);class m{Loc=i();At=i();Dir=i();Right=i();Up=i();matrView=e();MatrProj=e();MatrVP=e();FrameW=0;FrameH=0;Wp=0;Hp=0;ProjSize=0;ProjDist=0;ProjFarClip=0;set(t,s,h){return this.matrView=e.matrView(t,s,h),this.Right=i(this.matrView.m[0][0],this.matrView.m[1][0],this.matrView.m[2][0]),this.Up=i(this.matrView.m[0][1],this.matrView.m[1][1],this.matrView.m[2][1]),this.Dir=i(-this.matrView.m[0][2],-this.matrView.m[1][2],-this.matrView.m[2][2]),this.Loc=t,this.At=s,this.MatrVP=this.matrView.mul(this.MatrProj),this}setProj(t,i,s){let h,m;this.ProjDist=i,this.ProjFarClip=s,h=m=this.ProjSize=t,this.FrameW>=this.FrameH?h*=this.FrameW/this.FrameH:m*=this.FrameH/this.FrameW,this.Wp=h,this.Hp=m,this.MatrProj=e.matrFrustum(-h/2,h/2,-m/2,m/2,this.ProjDist,this.ProjFarClip),this.MatrVP=this.matrView.mul(this.MatrProj)}setSize(t,i){this.FrameW=t,this.FrameH=i,this.setProj(this.ProjSize,this.ProjDist,this.ProjFarClip)}}function a(...t){return new m(...t)}function n(){const t=()=>{const t=new Date;return t.getMilliseconds()/1e3+t.getSeconds()+60*t.getMinutes()};return this.response=(i=null)=>{let s=t();this.globalTime=s,this.globalDeltaTime=s-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=s-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=s-this.pauseTime-this.startTime),this.frameCounter++,s-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(s-this.oldTimeFPS),this.oldTimeFPS=s,this.frameCounter=0,null!=i&&(document.getElementById(i).innerHTML=this.getFPS())),this.oldTime=s},this.getFPS=()=>{this.FPS.toFixed(3)},this.globalTime=this.localTime=t(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}class l{async _init(t,i){this.name=t,this.id=null,this.shaders=[{id:null,type:i.gl.VERTEX_SHADER,name:"vert",src:""},{id:null,type:i.gl.FRAGMENT_SHADER,name:"frag",src:""}];for(const i of this.shaders){let s=await fetch(`bin/shaders/${t}/${i.name}.glsl`),h=await s.text();"string"==typeof h&&""!=h&&(i.src=h)}this.updateShadersSource(i)}updateShadersSource(t){if(this.shaders[0].id=null,this.shaders[1].id=null,this.id=null,""!=this.shaders[0].src&&""!=this.shaders[1].src){if(this.shaders.forEach((i=>{if(i.id=t.gl.createShader(i.type),t.gl.shaderSource(i.id,i.src),t.gl.compileShader(i.id),!t.gl.getShaderParameter(i.id,t.gl.COMPILE_STATUS)){let s=t.gl.getShaderInfoLog(i.id);console.log(`Shader ${this.name}/${i.name} compile fail: ${s}`)}})),this.id=t.gl.createProgram(),this.shaders.forEach((i=>{null!=i.id&&t.gl.attachShader(this.id,i.id)})),t.gl.linkProgram(this.id),!t.gl.getProgramParameter(this.id,t.gl.LINK_STATUS)){let i=t.gl.getProgramInfoLog(this.id);console.log(`Shader program ${this.name} link fail: ${i}`)}this.updateShaderData(t)}}updateShaderData(t){let i=t.gl;this.attrs={};const s=i.getProgramParameter(this.id,i.ACTIVE_ATTRIBUTES);for(let t=0;t<s;t++){const s=i.getActiveAttrib(this.id,t);this.attrs[s.name]={name:s.name,type:s.type,size:s.size,loc:i.getAttribLocation(this.id,s.name)}}this.uniforms={};const h=i.getProgramParameter(this.id,i.ACTIVE_UNIFORMS);for(let t=0;t<h;t++){const s=i.getActiveUniform(this.id,t);this.uniforms[s.name]={name:s.name,type:s.type,size:s.size,loc:i.getUniformLocation(this.id,s.name)}}this.uniformBlocks={};const e=i.getProgramParameter(this.id,i.ACTIVE_UNIFORM_BLOCKS);for(let t=0;t<e;t++){const s=i.getActiveUniformBlockName(this.id,t),h=i.getActiveUniformBlockName(this.id,t);this.uniformBlocks[s]={name:s,index:h,size:i.getActiveUniformBlockParameter(this.id,h,i.UNIFORM_BLOCK_DATA_SIZE),bind:i.getActiveUniformBlockParameter(this.id,h,i.UNIFORM_BLOCK_BINDING)}}}constructor(t,i){this._init(t,i)}apply(t){null!=t.shd.id&&t.gl.useProgram(t.shd.id)}}class o{pos=i();n=i();tex=i()}function d(...t){return new o(...t)}class u{type;trans=e();constructor(t,s,h){this.numOfElements=0;let e=[],m=0;!function(t,s){let h;for(h=0;h<t.length;h++)t[h].n=i(0);for(h=0;h<s.length;h+=3){let i=s[h],e=s[h+1],m=s[h+2],r=t[i].pos,a=t[e].pos,n=t[m].pos,l=a.sub(r).cross(n.sub(r)).normalize();t[i].n=t[i].n.add(l),t[e].n=t[e].n.add(l),t[m].n=t[m].n.add(l)}for(h=0;h<t.length;h++)t[h].n=t[h].n.normalize()}(t,s);for(let i of t)e[m++]=i.pos.x,e[m++]=i.pos.y,e[m++]=i.pos.z,e[m++]=i.n.x,e[m++]=i.n.y,e[m++]=i.n.z,e[m++]=i.tex.x,e[m++]=i.tex.y;this.vertexArray=h.gl.createVertexArray(),h.gl.bindVertexArray(this.vertexArray),this.vertexBufer=h.gl.createBuffer(),h.gl.bindBuffer(h.gl.ARRAY_BUFFER,this.vertexBufer),this.primLoad=!1,this.rnd=h,this.ind=s,this.points=e}draw(t){null==t&&(t=e());let i=this.rnd.shd;if(this.primLoad||(this.rnd.gl.bufferData(this.rnd.gl.ARRAY_BUFFER,new Float32Array(this.points),this.rnd.gl.STATIC_DRAW),-1!=i.attrs.InPosition.loc&&(this.rnd.gl.vertexAttribPointer(i.attrs.InPosition.loc,3,this.rnd.gl.FLOAT,!1,32,0),this.rnd.gl.enableVertexAttribArray(i.attrs.InPosition.loc)),-1!=i.attrs.InNormal.loc&&(this.rnd.gl.vertexAttribPointer(i.attrs.InNormal.loc,3,this.rnd.gl.FLOAT,!1,32,12),this.rnd.gl.enableVertexAttribArray(i.attrs.InNormal.loc)),-1!=i.attrs.InTexCoord.loc&&(this.rnd.gl.vertexAttribPointer(i.attrs.InTexCoord.loc,3,this.rnd.gl.FLOAT,!1,32,24),this.rnd.gl.enableVertexAttribArray(i.attrs.InTexCoord.loc)),this.indexArray=this.rnd.gl.createBuffer(),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),this.rnd.gl.bufferData(this.rnd.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(this.ind),this.rnd.gl.STATIC_DRAW),this.numOfElements=this.ind.length,this.primLoad=!0),this.world=this.trans.mul(t),this.rnd.gl.bindVertexArray(this.vertexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ARRAY_BUFFER,this.vertexBufer),-1!=i.uniforms.CamDir.loc&&this.rnd.gl.uniform3f(i.uniforms.CamDir.loc,!1,this.rnd.camera.Dir.x,this.rnd.camera.Dir.y,this.rnd.camera.Dir.z),i.uniforms.CamLoc&&-1!=i.uniforms.CamLoc.loc&&this.rnd.gl.uniform3f(i.uniforms.CamLoc.loc,!1,this.rnd.camera.Loc.x,this.rnd.camera.Loc.y,this.rnd.camera.Loc.z),-1!=i.uniforms.World.loc&&this.rnd.gl.uniformMatrix4fv(i.uniforms.World.loc,!1,new Float32Array([].concat(...this.world.m))),-1!=i.uniforms.VP.loc&&this.rnd.gl.uniformMatrix4fv(i.uniforms.VP.loc,!1,new Float32Array([].concat(...this.rnd.camera.MatrVP.m))),this.mtl){let t=[];t.push(this.mtl.ka.x),t.push(this.mtl.ka.y),t.push(this.mtl.ka.z),t.push(0),t.push(this.mtl.kd.x),t.push(this.mtl.kd.y),t.push(this.mtl.kd.z),t.push(0),t.push(this.mtl.ks.x),t.push(this.mtl.ks.y),t.push(this.mtl.ks.z),t.push(this.mtl.ph);for(let i=0;i<8;i++)t.push(this.mtl.isTex[i]);this.rnd.shd.ubo.update(new Float32Array(t)),this.mtl.apply(this.rnd)}this.numOfElements>0?this.rnd.gl.drawElements(this.rnd.gl.TRIANGLES,this.numOfElements,this.rnd.gl.UNSIGNED_INT,0):this.rnd.gl.drawArrays(this.rnd.gl.TRIANGLES,0,this.numOfElements)}}class c{constructor(t,i,s){this.gl=s.gl,this.type=t,this.size=i,this.id=null,0!=i&&null!=t&&(this.id=this.gl.createBuffer(),this.gl.bindBuffer(t,this.id),this.gl.bufferData(t,i,this.gl.STATIC_DRAW))}update(t){this.gl.bindBuffer(this.type,this.id),this.gl.bufferSubData(this.type,0,t)}}class p extends c{constructor(t,i,s,h){super(h.gl.UNIFORM_BUFFER,i,h),this.gl=h.gl,this.name=t,this.bindPoint=s}apply(t){null!=t&&null!=t.id&&null!=t.uniformBlocks[this.name]&&(this.gl.uniformBlockBinding(t.id,t.uniformBlocks[this.name].index,this.bindPoint),this.gl.bindBufferBase(this.gl.UNIFORM_BUFFER,this.bindPoint,this.id))}}const g=[];g.push({name:"Black Plastic",Ka:i(0,0,0),Kd:i(.01,.01,.01),Ks:i(.5,.5,.5),Ph:32}),g.push({name:"Brass",Ka:i(.329412,.223529,.027451),Kd:i(.780392,.568627,.113725),Ks:i(.992157,.941176,.807843),Ph:27.8974}),g.push({name:"Bronze",Ka:i(.2125,.1275,.054),Kd:i(.714,.4284,.18144),Ks:i(.393548,.271906,.166721),Ph:25.6}),g.push({name:"Chrome",Ka:i(.25,.25,.25),Kd:i(.4,.4,.4),Ks:i(.774597,.774597,.774597),Ph:76.8}),g.push({name:"Copper",Ka:i(.19125,.0735,.0225),Kd:i(.7038,.27048,.0828),Ks:i(.256777,.137622,.086014),Ph:12.8}),g.push({name:"Gold",Ka:i(.24725,.1995,.0745),Kd:i(.75164,.60648,.22648),Ks:i(.628281,.555802,.366065),Ph:51.2}),g.push({name:"Peweter",Ka:i(.10588,.058824,.113725),Kd:i(.427451,.470588,.541176),Ks:i(.3333,.3333,.521569),Ph:9.84615}),g.push({name:"Silver",Ka:i(.19225,.19225,.19225),Kd:i(.50754,.50754,.50754),Ks:i(.508273,.508273,.508273),Ph:51.2}),g.push({name:"Polished Silver",Ka:i(.23125,.23125,.23125),Kd:i(.2775,.2775,.2775),Ks:i(.773911,.773911,.773911),Ph:89.6}),g.push({name:"Turquoise",Ka:i(.1,.18725,.1745),Kd:i(.396,.74151,.69102),Ks:i(.297254,.30829,.306678),Ph:12.8}),g.push({name:"Ruby",Ka:i(.1745,.01175,.01175),Kd:i(.61424,.04136,.04136),Ks:i(.727811,.626959,.626959),Ph:76.8}),g.push({name:"Polished Gold",Ka:i(.24725,.2245,.0645),Kd:i(.34615,.3143,.0903),Ks:i(.797357,.723991,.208006),Ph:83.2}),g.push({name:"Polished Bronze",Ka:i(.25,.148,.06475),Kd:i(.4,.2368,.1036),Ks:i(.774597,.458561,.200621),Ph:76.8}),g.push({name:"Polished Copper",Ka:i(.2295,.08825,.0275),Kd:i(.5508,.2118,.066),Ks:i(.580594,.223257,.0695701),Ph:51.2}),g.push({name:"Jade",Ka:i(.135,.2225,.1575),Kd:i(.135,.2225,.1575),Ks:i(.316228,.316228,.316228),Ph:12.8}),g.push({name:"Obsidian",Ka:i(.05375,.05,.06625),Kd:i(.18275,.17,.22525),Ks:i(.332741,.328634,.346435),Ph:38.4}),g.push({name:"Pearl",Ka:i(.25,.20725,.20725),Kd:i(1,.829,.829),Ks:i(.296648,.296648,.296648),Ph:11.264}),g.push({name:"Emerald",Ka:i(.0215,.1745,.0215),Kd:i(.07568,.61424,.07568),Ks:i(.633,.727811,.633),Ph:76.8}),g.push({name:"Black Rubber",Ka:i(.02,.02,.02),Kd:i(.01,.01,.01),Ks:i(.4,.4,.4),Ph:10});class f{constructor(t,i,s,h,e,m){this.tex=[],this.isTex=[],this.name=t,this.ka=i,this.kd=s,this.ks=h,this.ph=e;for(let t=0;t<8;t++)this.tex[t]=null,this.isTex[t]=0}apply(t){if(null!=t.shd.id){t.shd.apply(t),t.shd.ubo.apply(t.shd);for(let i=0;i<this.tex.length;i++)null!=this.tex[i]&&this.tex[i].apply(t,i)}}textureAttach(t,i){i>0||i>8||!t||(this.tex[i]=t,this.isTex[i]=1)}static getFromLib(t,i){for(let i=0;i<g.length;i++)if(g[i].name==t)return g[i].mtl;this.ka=.3,this.kd=.47,this.ks=.8,this.ph=30}static init(t){t.shd.ubo=function(...t){return new p(...t)}("Material",t.shd.uniformBlocks.Material.size,t.shd.uniformBlocks.Material.bind,t)}static loadLib(t){for(let i=0;i<g.length;i++)g[i].mtl=new f(g[i].name,g[i].Ka,g[i].Kd,g[i].Ks,g[i].Ph,t)}}function x(...t){return f(...agrs)}x.getFromLib=(...t)=>f.getFromLib(...t),x.init=(...t)=>f.init(...t),x.loadLib=(...t)=>f.loadLib(...t);class y{constructor(t,i){this.name=t,this.img=new Image,this.img.src=i}}class A{constructor(t,i,s){this.name=t.name,this.type=i,this.id=s.gl.createTexture(),this.gl=s.gl,this.gl.bindTexture(this.type,this.id),t.img&&(this.gl.texImage2D(this.type,0,this.gl.RGBA,1,1,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,new Uint8Array([255,255,255,0])),t.img.onload=()=>{this.gl.bindTexture(this.type,this.id),this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL,!0),this.gl.texImage2D(this.type,0,this.gl.RGBA,this.gl.RGBA,this.gl.UNSIGNED_BYTE,t.img),this.gl.generateMipmap(this.type),this.gl.texParameteri(this.type,this.gl.TEXTURE_WRAP_S,this.gl.REPEAT),this.gl.texParameteri(this.type,this.gl.TEXTURE_WRAP_T,this.gl.REPEAT),this.gl.texParameteri(this.type,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR_MIPMAP_LINEAR),this.gl.texParameteri(this.type,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR)})}apply(t,i){t.gl.activeTexture(t.gl.TEXTURE0+i),t.gl.bindTexture(this.type,this.id)}}class P{constructor(t,s){this.vert=[];let h=[];this.ind=[];let e,m=t/2,r=i(-m,-m,-m),a=i(-m,-m,m),n=i(m,-m,m),l=i(m,-m,-m),o=i(-m,m,-m),c=i(-m,m,m),p=i(m,m,m),g=i(m,m,-m);for(e=0;e<48;e++)h[e]=d(),h[e].tex=i(0);e=0,h[e].tex=i(1,0,0),h[e++].pos=a,h[e].tex=i(0,0,0),h[e++].pos=r,h[e].tex=i(0,1,0),h[e++].pos=n,h[e].tex=i(0,1,0),h[e++].pos=n,h[e].tex=i(0,0,0),h[e++].pos=r,h[e].tex=i(1,1,0),h[e++].pos=l,h[e++].pos=r,h[e++].pos=c,h[e++].pos=o,h[e++].pos=r,h[e++].pos=a,h[e++].pos=c,h[e++].pos=n,h[e++].pos=p,h[e++].pos=c,h[e++].pos=n,h[e++].pos=c,h[e++].pos=a,h[e++].pos=n,h[e++].pos=l,h[e++].pos=p,h[e++].pos=l,h[e++].pos=g,h[e++].pos=p,h[e++].pos=r,h[e++].pos=o,h[e++].pos=g,h[e++].pos=r,h[e++].pos=g,h[e++].pos=l,h[e++].pos=o,h[e++].pos=c,h[e++].pos=p,h[e++].pos=o,h[e++].pos=p,h[e++].pos=g;for(let t=0;t<e;t++)this.ind[t]=t;this.primmitive=function(...t){return new u(...t)}(h,this.ind,s)}draw(t){this.primmitive.draw(t)}}function T(...t){return new P(...t)}class z{init(t){this.cube=T(.1,t),this.cube.primmitive.mtl=x.getFromLib("Bronze");let i=function(...t){return new y(...t)}("Cube","bin/images/cube.png");this.cube.primmitive.mtl.textureAttach(function(...t){return new A(...t)}(i,t.gl.TEXTURE_2D,t),0),this.cube2=T(.2,t),this.cube2.primmitive.mtl=x.getFromLib("Gold")}response(){}render(t){this.cube.draw(e.matrRotateX(-90).mul(e.matrRotateY(45))),this.cube2.draw(e.matrRotateY(45*t.timer.localTime+45).mul(e.matrTranslate(i(0,.2,0))))}close(){}}function b(t){return 180*t/Math.PI}class w{init(){}response(t){let s,h,m,r,a,n,l,o;t.isMove&&(s=t.camera.At.sub(t.camera.Loc).len(),h=(t.camera.Loc.y-t.camera.At.y)/s,m=Math.sqrt(1-h*h),r=s*m,a=(t.camera.Loc.z-t.camera.At.z)/r,n=(t.camera.Loc.x-t.camera.At.x)/r,l=b(Math.atan2(n,a)),o=b(Math.atan2(m,h)),o+=-1*t.Mdy,o<.08&&(o=.08),o>178.9&&(o=178.9),s+=.001*t.Mdz,s<.1&&(s=.1),t.camera.set(i(0,s,0).transform(e.matrRotateX(o).mul(e.matrRotateY(l).mul(e.matrTranslate(t.camera.At)))),t.camera.At,i(0,1,0)))}render(){}close(){}}let M=[];M.push(function(...t){return new z(...t)}()),M.push(function(...t){return new w(...t)}());class R{init(...t){for(let i of M)i.init(...t)}response(...t){for(let i of M)i.response(...t)}render(...t){for(let i of M)i.render(...t)}close(...t){for(let i of M)i.close(...t)}}function E(...t){return new R(...t)}class F{prims=[];matrs=[];constructor(t,i){if(this.canvas=t,this.gl=this.canvas.getContext("webgl2"),this.gl.enable(this.gl.DEPTH_TEST),null==this.gl)return alert("WebGL2 not supported"),null;this.shd=function(t,i){return new l(t,i)}("def",this),this.gl.clearColor(.3,.47,.8,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.flag=!1,this.camera=i,this.timer=new n,x.loadLib(this)}resize(t){this.camera=t,this.gl.viewport(0,0,this.canvas.width,this.canvas.height)}draw(){const t=()=>{this.gl.clearColor(.3,.47,.8,1),this.flag?(this.shd.apply(this),this.timer.response(),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.inputUpdate(),E().response(this),E().render(this)):null!=this.shd.id&&(this.shd.apply(this),this.shd.updateShaderData(this),this.flag=!0,x.init(this),this.shd.ubo.apply(this.shd)),window.requestAnimationFrame(t)};t()}inputInit(){this.hammer||(this.hammer=new Hammer(this.canvas)),window.addEventListener("keydown",(t=>{"f"==t.code&&t.shiftKey&&rnd.cam.set(vec3(5),vec3(0),vec3(0,1,0))})),window.addEventListener("keydown",(t=>{"p"==t.code&&t.shiftKey&&(rnd.timer.isPause=!rnd.timer.isPause)})),this.isMove=!0,this.Mdz=0,this.Mdy=0,this.Mdx=0,this.My=0,this.Mx=0,this.Mz=0,this.hammer.on("pan",(t=>{this.Mtype="pan",this.Mdz=t.deltaX,this.Mz+=t.deltaX,this.Mdy=t.deltaY,this.My+=t.deltaY,this.isMove=!0})),this.canvas.addEventListener("mousewheel",(t=>{this.Mdz=t.wheelDelta,this.Mz+=t.wheelDelta,this.isMove=!0,t.preventDefault()}))}inputUpdate(){this.oldMx==this.Mx&&(this.Mdx=0),this.oldMy==this.My&&(this.Mdy=0),this.oldMz==this.Mz&&(this.Mdz=0),this.oldMx=this.Mx,this.oldMy=this.My,this.oldMz=this.Mz}}let K,D,B,S=new WebSocket("ws://localhost:8000");window.addEventListener("load",(()=>{K=document.getElementById("gameCanv"),D=document.getElementById("chat2D"),K.width=document.body.clientWidth-D.clientWidth-20,K.height=document.body.clientHeight,function(){let t=a();t.set(U,i(0),L),t.setProj(v,I,_),t.setSize(K.width,K.height),B=function(...t){return new F(...t)}(K,t),B.inputInit(),E().init(B),B.draw()}()})),window.addEventListener("resize",(()=>{K.width=document.body.clientWidth-D.clientWidth-20;let t=a();t.set(U,i(0),L),t.setProj(v,I,_),t.setSize(K.width,K.height),B.resize(t)})),S.onopen=t=>{S.send("Hello from client")},S.onmessage=t=>{try{JSON.parse(t.data.toString())}catch{}};const L=i(0,1,0),I=.1,v=.1,_=300,U=i(0,1.5,1);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
